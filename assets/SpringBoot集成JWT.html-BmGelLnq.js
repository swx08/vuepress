import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,a as e}from"./app-DCsLG_oX.js";const t={},p=e(`<h1 id="springboot集成jwt" tabindex="-1"><a class="header-anchor" href="#springboot集成jwt"><span>SpringBoot集成JWT</span></a></h1><h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言"><span>前言</span></a></h2><h3 id="json-web-token-json-web令牌" tabindex="-1"><a class="header-anchor" href="#json-web-token-json-web令牌"><span>JSON Web Token（JSON Web令牌）</span></a></h3><p>​ 是一个开放标准(rfc7519)，它定义了一种紧凑的、自包含的方式，用于在各方之间以JSON对象安全地传输信息。此信息可以验证和信 任，因为它是数字签名的。jwt可以使用秘密〈使用HNAC算法）或使用RSA或ECDSA的公钥/私钥对进行签名。</p><p>​ 通过JSON形式作为Web应用中的令牌，用于在各方之间安全地将信息作为JSON对象传输。在数据传输过程中还可以完成数据加密、 签名等相关处理。</p><h3 id="jwt作用" tabindex="-1"><a class="header-anchor" href="#jwt作用"><span>JWT作用：</span></a></h3><p>​ 授权：一旦用户登录，每个后续请求将包括JWT，从而允许用户访问该令牌允许的路由，服务和资源。它的开销很小并且可以在不同的 域中使用。如：单点登录。 ​ 信息交换：在各方之间安全地传输信息。JWT可进行签名（如使用公钥/私钥对)，因此可确保发件人。由于签名是使用标头和有效负载 计算的，因此还可验证内容是否被篡改。</p><h2 id="_1-传统session" tabindex="-1"><a class="header-anchor" href="#_1-传统session"><span>1.传统Session</span></a></h2><h3 id="_1-1认证方式" tabindex="-1"><a class="header-anchor" href="#_1-1认证方式"><span>1.1认证方式</span></a></h3><p>http协议本身是一种无状态的协议，如果用户向服务器提供了用户名和密码来进行用户认证，下次请求时，用户还要再一次进行用户认证才行。因为根据http协议，服务器并不能知道是哪个用户发出的请求，所以为了让我们的应用能识别是哪个用户发出的请求，我们只能在服务器存储─份用户登录的信息，这份登录信息会在响应时传递给浏览器，告诉其保存为cookie,以便下次请求时发送给我们的应用，这样应用就能识别请求来自哪个用户。</p><img src="https://img-blog.csdnimg.cn/20201029154819357.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RvcF9MMzk4,size_16,color_FFFFFF,t_70#pic_center"><h3 id="_1-2-暴露的问题" tabindex="-1"><a class="header-anchor" href="#_1-2-暴露的问题"><span>1.2.暴露的问题</span></a></h3><p>​ 用户经过应用认证后，应用都要在服务端做一次记录，以方便用户下次请求的鉴别，通常而言session都是保存在内存中，而随着认证 用户的增多，服务端的开销会明显增大； ​ 用户认证后，服务端做认证记录，如果认证的记录被保存在内存中的话，用户下次请求还必须要请求在这台服务器上，这样才能拿到授 权的资源。在分布式的应用上，限制了负载均衡器的能力。以此限制了应用的扩展能力； ​ session是基于cookie来进行用户识别，cookie如果被截获，用户很容易受到CSRF（跨站伪造请求攻击)攻击； ​ 在前后端分离系统中应用解耦后增加了部署的复杂性。通常用户一次请求就要转发多次。如果用session每次携带sessionid到服务 ​ 器，服务器还要查询用户信息。同时如果用户很多。这些信息存储在服务器内存中，给服务器增加负担。还有就是sessionid就是一个 特征值，表达的信息不够丰富。不容易扩展。而且如果你后端应用是多节点部署。那么就需要实现session共享机制。不方便集群群用。</p><h2 id="_2-jwt认证" tabindex="-1"><a class="header-anchor" href="#_2-jwt认证"><span>2.JWT认证</span></a></h2><figure><img src="https://img-blog.csdnimg.cn/20201029154848467.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RvcF9MMzk4,size_16,color_FFFFFF,t_70#pic_center" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_2-1-认证流程" tabindex="-1"><a class="header-anchor" href="#_2-1-认证流程"><span>2.1.认证流程</span></a></h3><p>前端通过Web表单将自己的用户名和密码发送到后端的接口。该过程一般是HTTP的POST请求。建议的方式是通过SSL加密的传输(https协议)，从而避免敏感信息被嗅探。 后端核对用户名和密码成功后，将用户的id等其他信息作为JWT Payload(负载)，将其与头部分别进行Base64编码拼接后签名，形成一个JWT(Token)。 后端将JWT字符串作为登录成功的返回结果返回给前端。前端可以将返回的结果保存在localStorage（浏览器本地缓存）或sessionStorage（session缓存）上，退出登录时前端删除保存的JWT即可。 前端在每次请求时将JWT放入HTTP的Header中的Authorization位。(解决XSS和XSRF问题）HEADER 后端检查是否存在，如存在验证JWT的有效性。例如，检查签名是否正确﹔检查Token是否过期;检查Token的接收方是否是自己(可选） ·验证通过后后端使用JWT中包含的用户信息进行其他逻辑操作，返回相应结果。</p><h3 id="_2-2-jwt优点" tabindex="-1"><a class="header-anchor" href="#_2-2-jwt优点"><span>2.2.JWT优点</span></a></h3><p>简洁(Compact)：可以通过URL，POST参数或者在HTTP header发送，数据量小，传输速度也很快； 自包含(Self-contained)：负载中包含了所有用户所需要的信息，避免了多次查询数据库； Token是以JSON加密的形式保存在客户端，所以JWT是跨语言的，原则上任何web形式都支持。 不需要在服务端保存会话信息，特别适用于分布式微服务。</p><h2 id="_3-jwt结构" tabindex="-1"><a class="header-anchor" href="#_3-jwt结构"><span>3.JWT结构</span></a></h2><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>就是令牌token，是一个<span class="token class-name">String</span>字符串，由<span class="token number">3</span>部分组成，中间用点隔开
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>令牌组成：

标头（Header）
有效载荷（Payload）
签名（Signature）
token格式：head.payload.singurater 如：xxxxx.yyyy.zzzz
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Header：有令牌的类型和所使用的签名算法，如HMAC、SHA256、RSA；使用Base64编码组成；（Base64是一种编码，不是一种加密过程，可以被翻译成原来的样子）</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>{
	&quot;alg&quot; : &quot;HS256&quot;,
	&quot;type&quot; : &quot;JWT&quot;
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Payload ：有效负载，包含声明；声明是有关实体（通常是用户）和其他数据的声明，不放用户敏感的信息，如密码。同样使用Base64编码</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>{
	&quot;sub&quot; : &quot;123&quot;,
	&quot;name&quot; : &quot;John Do&quot;,
	&quot;admin&quot; : true
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Signature ：前面两部分都使用Base64进行编码，前端可以解开知道里面的信息。Signature需要使用编码后的header和payload 加上我们提供的一个密钥，使用header中指定的签名算法(HS256)进行签名。签名的作用是保证JWT没有被篡改过</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>HMACSHA256(base64UrlEncode(header) + &quot;.&quot; + base64UrlEncode(payload), secret);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>**签名目的：**签名的过程实际上是对头部以及负载内容进行签名，防止内容被窜改。如果有人对头部以及负载的内容解码之后进行修改，再进行编码，最后加上之前的签名组合形成新的JWT的话，那么服务器端会判断出新的头部和负载形成的签名和JWT附带上的签名是不一样的。如果要对新的头部和负载进行签名，在不知道服务器加密时用的密钥的话，得出来的签名也是不一样的。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>信息安全问题：Base64是一种编码，是可逆的，适合传递一些非敏感信息；JWT中不应该在负载中加入敏感的数据。如传输用户的ID被知道也是安全的，如密码不能放在JWT中；JWT常用于设计用户认证、授权系统、web的单点登录。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://img-blog.csdnimg.cn/20201029154920267.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RvcF9MMzk4,size_16,color_FFFFFF,t_70#pic_center" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="_4-jwt使用" tabindex="-1"><a class="header-anchor" href="#_4-jwt使用"><span>4.JWT使用</span></a></h2><h3 id="_4-1-引入依赖" tabindex="-1"><a class="header-anchor" href="#_4-1-引入依赖"><span>4.1.引入依赖</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>引入<span class="token constant">JWT</span><span class="token operator">--</span><span class="token operator">&gt;</span>
<span class="token generics"><span class="token punctuation">&lt;</span>dependency<span class="token punctuation">&gt;</span></span>
    <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">&gt;</span></span>com<span class="token punctuation">.</span>auth0<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">&gt;</span>
    <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">&gt;</span></span>java<span class="token operator">-</span>jwt<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">&gt;</span>
    <span class="token generics"><span class="token punctuation">&lt;</span>version<span class="token punctuation">&gt;</span></span><span class="token number">3.10</span><span class="token number">.0</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-2-生成token" tabindex="-1"><a class="header-anchor" href="#_4-2-生成token"><span>4.2 生成token</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JWTUtils</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * 生成Token
     * <span class="token keyword">@param</span> <span class="token parameter">userId</span>
     * <span class="token keyword">@param</span> <span class="token parameter">password</span>
     * <span class="token keyword">@return</span>
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">genToken</span><span class="token punctuation">(</span><span class="token class-name">String</span> userId<span class="token punctuation">,</span><span class="token class-name">String</span> password<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token constant">JWT</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withAudience</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span> <span class="token comment">//将userId保存到token里面，作为载荷</span>
                <span class="token punctuation">.</span><span class="token function">withExpiresAt</span><span class="token punctuation">(</span><span class="token class-name">DateUtil</span><span class="token punctuation">.</span><span class="token function">offsetHour</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//2小时后token过期</span>
                <span class="token punctuation">.</span><span class="token function">sign</span><span class="token punctuation">(</span><span class="token class-name">Algorithm</span><span class="token punctuation">.</span><span class="token function">HMAC256</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-3-使用设置好的token配置拦截器" tabindex="-1"><a class="header-anchor" href="#_4-3-使用设置好的token配置拦截器"><span>4.3 使用设置好的token配置拦截器</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoginInterceptor</span> <span class="token keyword">implements</span> <span class="token class-name">HandlerInterceptor</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">IUserService</span> userService<span class="token punctuation">;</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">preHandle</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">Object</span> handler<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>

        <span class="token comment">//从请求头里面获取token</span>
        <span class="token class-name">String</span> token <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token string">&quot;token&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//如果不是映射到方法直接通过</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>handler <span class="token keyword">instanceof</span> <span class="token class-name">HandlerMethod</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">//执行认证</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">StrUtil</span><span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">TokenIsEmptyException</span><span class="token punctuation">(</span><span class="token string">&quot;无token,请重新登录!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">//获取 token中的userId</span>
        <span class="token class-name">String</span> userId<span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            userId <span class="token operator">=</span> <span class="token constant">JWT</span><span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAudience</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">//根据token中的userId查询数据库</span>

        <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">JWTDecodeException</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">TokenVerifyFeildException</span><span class="token punctuation">(</span><span class="token string">&quot;token验证失败,请重新登录!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token class-name">UserDTO</span> user <span class="token operator">=</span> userService<span class="token punctuation">.</span><span class="token function">getById</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>user <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UsernameNotFoundException</span><span class="token punctuation">(</span><span class="token string">&quot;用户不存在，请重新登录!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">//用户密码加签验证:token</span>
        <span class="token class-name">JWTVerifier</span> jwtVerifier <span class="token operator">=</span> <span class="token constant">JWT</span><span class="token punctuation">.</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token class-name">Algorithm</span><span class="token punctuation">.</span><span class="token function">HMAC256</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            jwtVerifier<span class="token punctuation">.</span><span class="token function">verify</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//验证token</span>
        <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">JWTVerificationException</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">TokenVerifyFeildException</span><span class="token punctuation">(</span><span class="token string">&quot;token验证失败,请重新登录!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-4-注册拦截器" tabindex="-1"><a class="header-anchor" href="#_4-4-注册拦截器"><span>4.4 注册拦截器</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoginInterceptorConfig</span> <span class="token keyword">implements</span> <span class="token class-name">WebMvcConfigurer</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addInterceptors</span><span class="token punctuation">(</span><span class="token class-name">InterceptorRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//所谓白名单就是用户没有登录就可以访问的路径</span>
        <span class="token comment">//黑名单就是用户没有登录就不可以访问的路径</span>
        <span class="token comment">//1.创建自定义的拦截器对象</span>
        <span class="token comment">//2.配置白名单并存放在一个List集合</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> patters <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        patters<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;/users/login&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        patters<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;/**/export&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        patters<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;/**/import&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//registry.addInterceptor(interceptor);完成拦截</span>
        <span class="token comment">// 器的注册,后面的addPathPatterns表示拦截哪些url</span>
        <span class="token comment">//这里的参数/**表示所有请求,再后面的excludePathPatterns表</span>
        <span class="token comment">// 示有哪些是白名单,且参数是列表</span>
        registry<span class="token punctuation">.</span><span class="token function">addInterceptor</span><span class="token punctuation">(</span><span class="token function">loginInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">addPathPatterns</span><span class="token punctuation">(</span><span class="token string">&quot;/**&quot;</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">excludePathPatterns</span><span class="token punctuation">(</span>patters<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">LoginInterceptor</span> <span class="token function">loginInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">LoginInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-5-在request-js文件中配置前端拦截器" tabindex="-1"><a class="header-anchor" href="#_4-5-在request-js文件中配置前端拦截器"><span>4.5 在request.js文件中配置前端拦截器</span></a></h3><div class="language-vue line-numbers-mode" data-ext="vue" data-title="vue"><pre class="language-vue"><code>// request 拦截器
// 可以自请求发送前对请求做一些处理
// 比如统一加token，对请求参数统一加密
request.interceptors.request.use(config =&gt; {
    config.headers[&#39;Content-Type&#39;] = &#39;application/json;charset=utf-8&#39;;
    let user = localStorage.getItem(&quot;user&quot;) ? JSON.parse(localStorage.getItem(&quot;user&quot;)) : {}
    if(user){
        config.headers[&#39;token&#39;] = user.token;  // 设置请求头
    }
    return config
}, error =&gt; {
    return Promise.reject(error)
});
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,42),o=[p];function c(i,l){return s(),a("div",null,o)}const d=n(t,[["render",c],["__file","SpringBoot集成JWT.html.vue"]]),k=JSON.parse('{"path":"/posts/%E5%90%8E%E7%AB%AF/%E5%AE%9E%E6%88%98/SpringBoot%E9%9B%86%E6%88%90JWT.html","title":"SpringBoot集成JWT","lang":"zh-CN","frontmatter":{"icon":"pen-to-square","date":"2022-01-12T00:00:00.000Z","category":["后端"],"tag":["SpringBoot","JWT","实战"],"star":true,"sticky":true,"description":"SpringBoot集成JWT 前言 JSON Web Token（JSON Web令牌） ​ 是一个开放标准(rfc7519)，它定义了一种紧凑的、自包含的方式，用于在各方之间以JSON对象安全地传输信息。此信息可以验证和信 任，因为它是数字签名的。jwt可以使用秘密〈使用HNAC算法）或使用RSA或ECDSA的公钥/私钥对进行签名。 ​ 通过JSO...","head":[["meta",{"property":"og:url","content":"https://swx08.github.io/vuepress/posts/%E5%90%8E%E7%AB%AF/%E5%AE%9E%E6%88%98/SpringBoot%E9%9B%86%E6%88%90JWT.html"}],["meta",{"property":"og:site_name","content":"文学博客"}],["meta",{"property":"og:title","content":"SpringBoot集成JWT"}],["meta",{"property":"og:description","content":"SpringBoot集成JWT 前言 JSON Web Token（JSON Web令牌） ​ 是一个开放标准(rfc7519)，它定义了一种紧凑的、自包含的方式，用于在各方之间以JSON对象安全地传输信息。此信息可以验证和信 任，因为它是数字签名的。jwt可以使用秘密〈使用HNAC算法）或使用RSA或ECDSA的公钥/私钥对进行签名。 ​ 通过JSO..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://img-blog.csdnimg.cn/20201029154848467.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RvcF9MMzk4,size_16,color_FFFFFF,t_70#pic_center"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:alt","content":"SpringBoot集成JWT"}],["meta",{"property":"article:author","content":"sixkey"}],["meta",{"property":"article:tag","content":"SpringBoot"}],["meta",{"property":"article:tag","content":"JWT"}],["meta",{"property":"article:tag","content":"实战"}],["meta",{"property":"article:published_time","content":"2022-01-12T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"SpringBoot集成JWT\\",\\"image\\":[\\"https://img-blog.csdnimg.cn/20201029154848467.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RvcF9MMzk4,size_16,color_FFFFFF,t_70#pic_center\\",\\"https://img-blog.csdnimg.cn/20201029154920267.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RvcF9MMzk4,size_16,color_FFFFFF,t_70#pic_center\\"],\\"datePublished\\":\\"2022-01-12T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"sixkey\\",\\"url\\":\\"https://swx08.github.io\\"}]}"]]},"headers":[{"level":2,"title":"前言","slug":"前言","link":"#前言","children":[{"level":3,"title":"JSON Web Token（JSON Web令牌）","slug":"json-web-token-json-web令牌","link":"#json-web-token-json-web令牌","children":[]},{"level":3,"title":"JWT作用：","slug":"jwt作用","link":"#jwt作用","children":[]}]},{"level":2,"title":"1.传统Session","slug":"_1-传统session","link":"#_1-传统session","children":[{"level":3,"title":"1.1认证方式","slug":"_1-1认证方式","link":"#_1-1认证方式","children":[]},{"level":3,"title":"1.2.暴露的问题","slug":"_1-2-暴露的问题","link":"#_1-2-暴露的问题","children":[]}]},{"level":2,"title":"2.JWT认证","slug":"_2-jwt认证","link":"#_2-jwt认证","children":[{"level":3,"title":"2.1.认证流程","slug":"_2-1-认证流程","link":"#_2-1-认证流程","children":[]},{"level":3,"title":"2.2.JWT优点","slug":"_2-2-jwt优点","link":"#_2-2-jwt优点","children":[]}]},{"level":2,"title":"3.JWT结构","slug":"_3-jwt结构","link":"#_3-jwt结构","children":[]},{"level":2,"title":"4.JWT使用","slug":"_4-jwt使用","link":"#_4-jwt使用","children":[{"level":3,"title":"4.1.引入依赖","slug":"_4-1-引入依赖","link":"#_4-1-引入依赖","children":[]},{"level":3,"title":"4.2 生成token","slug":"_4-2-生成token","link":"#_4-2-生成token","children":[]},{"level":3,"title":"4.3 使用设置好的token配置拦截器","slug":"_4-3-使用设置好的token配置拦截器","link":"#_4-3-使用设置好的token配置拦截器","children":[]},{"level":3,"title":"4.4 注册拦截器","slug":"_4-4-注册拦截器","link":"#_4-4-注册拦截器","children":[]},{"level":3,"title":"4.5  在request.js文件中配置前端拦截器","slug":"_4-5-在request-js文件中配置前端拦截器","link":"#_4-5-在request-js文件中配置前端拦截器","children":[]}]}],"git":{},"readingTime":{"minutes":7.79,"words":2338},"filePathRelative":"posts/后端/实战/SpringBoot集成JWT.md","localizedDate":"2022年1月12日","excerpt":"\\n<h2>前言</h2>\\n<h3>JSON Web Token（JSON Web令牌）</h3>\\n<p>​\\t是一个开放标准(rfc7519)，它定义了一种紧凑的、自包含的方式，用于在各方之间以JSON对象安全地传输信息。此信息可以验证和信\\t任，因为它是数字签名的。jwt可以使用秘密〈使用HNAC算法）或使用RSA或ECDSA的公钥/私钥对进行签名。</p>\\n<p>​\\t通过JSON形式作为Web应用中的令牌，用于在各方之间安全地将信息作为JSON对象传输。在数据传输过程中还可以完成数据加密、\\t签名等相关处理。</p>\\n<h3>JWT作用：</h3>\\n<p>​\\t授权：一旦用户登录，每个后续请求将包括JWT，从而允许用户访问该令牌允许的路由，服务和资源。它的开销很小并且可以在不同的\\t域中使用。如：单点登录。\\n​\\t信息交换：在各方之间安全地传输信息。JWT可进行签名（如使用公钥/私钥对)，因此可确保发件人。由于签名是使用标头和有效负载\\t计算的，因此还可验证内容是否被篡改。</p>","autoDesc":true}');export{d as comp,k as data};
