import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,a as t}from"./app-DCsLG_oX.js";const p={},e=t(`<h1 id="springboot集成redis" tabindex="-1"><a class="header-anchor" href="#springboot集成redis"><span>SpringBoot集成Redis</span></a></h1><p><strong>整合主要讲解redis缓存更新策略、缓存三大问题解决方案以及使用Lua脚本解决幂等问题</strong></p><h1 id="整合" tabindex="-1"><a class="header-anchor" href="#整合"><span><strong>整合</strong></span></a></h1><blockquote><p><strong>导入依赖</strong></p></blockquote><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>redis<span class="token operator">--</span><span class="token operator">&gt;</span>
    <span class="token generics"><span class="token punctuation">&lt;</span>dependency<span class="token punctuation">&gt;</span></span>
      <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">&gt;</span></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">&gt;</span>
      <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">&gt;</span></span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>starter<span class="token operator">-</span>data<span class="token operator">-</span>redis<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">&gt;</span>

    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>线程池pool<span class="token operator">--</span><span class="token operator">&gt;</span>
    <span class="token generics"><span class="token punctuation">&lt;</span>dependency<span class="token punctuation">&gt;</span></span>
      <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">&gt;</span></span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">&gt;</span>
      <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">&gt;</span></span>commons<span class="token operator">-</span>pool2<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><strong>yml配置文件</strong></p></blockquote><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">redis</span><span class="token punctuation">:</span>
    <span class="token key atrule">host</span><span class="token punctuation">:</span> localhost
    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">6379</span>
    <span class="token key atrule">database</span><span class="token punctuation">:</span> <span class="token number">0</span>
<span class="token comment">#连接超时时间</span>
    <span class="token key atrule">connect-timeout</span><span class="token punctuation">:</span> <span class="token number">1800000</span>
    <span class="token key atrule">lettuce</span><span class="token punctuation">:</span>
      <span class="token key atrule">pool</span><span class="token punctuation">:</span>
<span class="token comment">#连接池最大连接数(使用负值表示没有限制)</span>
        <span class="token key atrule">max-active</span><span class="token punctuation">:</span> <span class="token number">20</span>
<span class="token comment">#最大阻塞等待时间(负数表示没限制)</span>
        <span class="token key atrule">max-wait</span><span class="token punctuation">:</span> <span class="token number">-1</span>
<span class="token comment">#连接池中的最大空闲连接</span>
        <span class="token key atrule">max-idle</span><span class="token punctuation">:</span> <span class="token number">5</span>
<span class="token comment">#连接池中的最小空闲连接</span>
        <span class="token key atrule">min-idle</span><span class="token punctuation">:</span> <span class="token number">0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><strong>Key Value 序列化</strong></p></blockquote><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">redis<span class="token punctuation">.</span>config</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cache<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">CachingConfigurerSupport</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cache<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">EnableCaching</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Bean</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>connection<span class="token punctuation">.</span></span><span class="token class-name">RedisConnectionFactory</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">RedisTemplate</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>serializer<span class="token punctuation">.</span></span><span class="token class-name">GenericJackson2JsonRedisSerializer</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>serializer<span class="token punctuation">.</span></span><span class="token class-name">StringRedisSerializer</span></span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * redis序列化
 */</span>
<span class="token annotation punctuation">@EnableCaching</span>
<span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisConfig</span> <span class="token keyword">extends</span> <span class="token class-name">CachingConfigurerSupport</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> <span class="token function">redisTemplate</span><span class="token punctuation">(</span><span class="token class-name">RedisConnectionFactory</span> connectionFactory<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> redisTemplate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//默认的Key序列化器为：JdkSerializationRedisSerializer</span>
        redisTemplate<span class="token punctuation">.</span><span class="token function">setKeySerializer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringRedisSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// key序列化</span>
        redisTemplate<span class="token punctuation">.</span><span class="token function">setValueSerializer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">GenericJackson2JsonRedisSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// value序列化</span>

        redisTemplate<span class="token punctuation">.</span><span class="token function">setConnectionFactory</span><span class="token punctuation">(</span>connectionFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="缓存" tabindex="-1"><a class="header-anchor" href="#缓存"><span>缓存</span></a></h1><h2 id="缓存更新策略" tabindex="-1"><a class="header-anchor" href="#缓存更新策略"><span><strong>缓存更新策略</strong></span></a></h2><table><thead><tr><th></th><th>内存淘汰</th><th>超时剔除</th><th>主动更新</th></tr></thead><tbody><tr><td>说明</td><td>不用自己维护，利用Redis的内存淘汰机制，当内存不足时自动淘汰部分数据。下次查询时更新缓存。</td><td>给缓存数据添加TTL时间，到期后自动删除缓存。下次查询时更新缓存。</td><td>编写业务逻辑，在修改数据库的同时，更新缓存。</td></tr><tr><td>一致性</td><td>差</td><td>一般</td><td>好</td></tr><tr><td>维护成本</td><td>无</td><td>低</td><td>高</td></tr></tbody></table><p><strong><mark>业务场景</mark></strong></p><ul><li>低一致性需求：使用内存淘汰机制。</li><li>高一致性需求：主动更新，并以超时剔除作为兜底方案。</li></ul><p><strong><mark>三个问题需要考虑：</mark></strong></p><p>（1）删除缓存还是更新缓存？</p><ul><li>更新缓存：每次更新数据库都更新缓存，无效写操作较多</li><li>删除缓存：更新数据库时让缓存失效，查询时再更新缓存（建议）</li></ul><p>（2）如何保证缓存与数据库的操作的同时成功或失败？</p><ul><li>单体系统：将缓存与数据库操作放在一个事务</li><li>分布式系统：利用TCC等分布式事务方案</li></ul><p>（3）先操作缓存还是先操作数据库？</p><ul><li>先删除缓存，再操作数据库</li><li>先操作数据库，再删除缓存（建议）</li></ul><h2 id="缓存三大问题解决方案" tabindex="-1"><a class="header-anchor" href="#缓存三大问题解决方案"><span><strong>缓存三大问题解决方案</strong></span></a></h2><blockquote><p><strong>(1)、缓存穿透</strong></p><p><strong>（2）、缓存击穿</strong></p><p><strong>（3）、缓存雪崩</strong></p></blockquote><h3 id="缓存穿透" tabindex="-1"><a class="header-anchor" href="#缓存穿透"><span><strong>缓存穿透</strong></span></a></h3><p><strong>简单理解：缓存穿透是指客户端请求的数据在缓存中和数据库都不存在，这样缓存永远不会生效，这些请求都会打到数据库。</strong></p><figure><img src="https://ice.frostsky.com/2024/03/05/8f30241f4a924a734157ba22a51bc72f.png" alt="8f30241f4a924a734157ba22a51bc72f.png" tabindex="0" loading="lazy"><figcaption>8f30241f4a924a734157ba22a51bc72f.png</figcaption></figure><p><strong>解决方案</strong></p><p><strong>（1）缓存空对象</strong></p><ul><li>优点：实现简单，维护方便</li><li>缺点： <ul><li>额外的内存消耗</li><li>可能造成短期的数据不一致</li></ul></li></ul><figure><img src="https://ice.frostsky.com/2024/03/05/2ed2ad626e4cf23bb5de7a205d98b513.png" alt="2ed2ad626e4cf23bb5de7a205d98b513.png" tabindex="0" loading="lazy"><figcaption>2ed2ad626e4cf23bb5de7a205d98b513.png</figcaption></figure><p><strong>（2）布隆过滤器</strong></p><ul><li>优点：内存占用较少，没有多余key</li><li>缺点： <ul><li>实现复杂</li><li>存在误判可能</li></ul></li></ul><figure><img src="https://ice.frostsky.com/2024/03/05/3765c356f0617e06ec5e94b65e44dca0.png" alt="3765c356f0617e06ec5e94b65e44dca0.png" tabindex="0" loading="lazy"><figcaption>3765c356f0617e06ec5e94b65e44dca0.png</figcaption></figure><p><strong>缓存空对象代码片段</strong></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">//如果数据中不存在则缓存空对象返回,两分钟后过期</span>
redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">GoodsConstant</span><span class="token punctuation">.</span><span class="token constant">GOODS</span> <span class="token operator">+</span> userId<span class="token punctuation">,</span><span class="token string">&quot;&quot;</span><span class="token punctuation">,</span><span class="token class-name">RedisConstant</span><span class="token punctuation">.</span><span class="token constant">CACHE_NULL_EXPIRE</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MINUTES</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>其他解决方案：</strong></p><ul><li>增强id的复杂度，避免被猜测id规律</li><li>做好数据的基础格式校验</li><li>加强用户权限校验</li><li>做好热点参数的限流</li></ul><h3 id="缓存雪崩" tabindex="-1"><a class="header-anchor" href="#缓存雪崩"><span><strong>缓存雪崩</strong></span></a></h3><p><strong>简单理解：缓存雪崩</strong>是指同一时段大量的缓存key同时失效或者Redis服务宕机，导致大量请求到达数据库，带来巨大压力。</p><img src="https://ice.frostsky.com/2024/03/05/840e066d60bc1a94ddadea5a3cc1a817.png" alt="840e066d60bc1a94ddadea5a3cc1a817.png" style="zoom:80%;"><p><strong>解决方案</strong></p><ul><li>给不同的key的TTL添加随机值</li><li>利用Redis集群提高服务的可用性</li><li>给缓存业务添加降级限流策略</li><li>给业务添加多级缓存</li></ul><h3 id="缓存击穿" tabindex="-1"><a class="header-anchor" href="#缓存击穿"><span><strong>缓存击穿</strong></span></a></h3><p><strong>简单理解：缓存击穿问题 也叫热点key问题，即使也给被高并发访问并且缓存重建页较复杂的key突然失效了，无数的请求访问会在瞬间给数据库带来巨大的冲击。</strong></p><figure><img src="https://ice.frostsky.com/2024/03/05/31e844250335c6063d24e88449660556.png" alt="31e844250335c6063d24e88449660556.png" tabindex="0" loading="lazy"><figcaption>31e844250335c6063d24e88449660556.png</figcaption></figure><p><strong>解决方案</strong></p><ul><li><strong>互斥锁</strong></li><li><strong>逻辑过期</strong></li></ul><table><thead><tr><th>解决方案</th><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td>互斥锁</td><td>（1）没有额外的内存消耗。（2）保证一致性。（3）实现简单</td><td>（1）线程需要等待，性能受影响。（2）可能有死锁风险</td></tr><tr><td>逻辑过期</td><td>线程不需要等待，性能较好。</td><td>（1）有额外的内存消耗。（2）不保证一致性。（3）实现复杂</td></tr></tbody></table><p><strong><mark>互斥锁</mark></strong></p><img src="https://ice.frostsky.com/2024/03/05/61b82942c04d801283e35bb2dee7a490.png" alt="61b82942c04d801283e35bb2dee7a490.png" style="zoom:67%;"><p><strong>一下是一个简单的使用互斥锁解决的流程</strong></p><img src="https://ice.frostsky.com/2024/03/05/397072438d11e859412b812ed4856a3a.png" alt="397072438d11e859412b812ed4856a3a.png" style="zoom:67%;"><p><strong>获取互斥锁方法</strong></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
     * 获取锁方法
     * <span class="token keyword">@param</span> <span class="token parameter">key</span>
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">tryLock</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span><span class="token class-name">Integer</span> userId<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">//获取锁，要对锁设置一个过期时间，防止某些异常导致死锁</span>
        <span class="token class-name">Boolean</span> flag <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setIfAbsent</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> userId<span class="token punctuation">,</span> <span class="token class-name">RedisConstant</span><span class="token punctuation">.</span><span class="token constant">CACHE_LOCK_EXPIRE</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//如果为true则说明获取到了锁，若返回false则说明前面已经有线程获取到了锁</span>
        <span class="token keyword">return</span> <span class="token class-name">BooleanUtil</span><span class="token punctuation">.</span><span class="token function">isTrue</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>释放互斥锁方法</strong></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
     * 释放锁
     * <span class="token keyword">@param</span> <span class="token parameter">key</span>
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">unLock</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">//直接删除锁的键即可</span>
        redisTemplate<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>核心代码</strong></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">GoodsDto</span><span class="token punctuation">&gt;</span></span> <span class="token function">getList</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> userId<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//先去redis中查询是否有缓存的数据</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">GoodsDto</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">GoodsDtoList</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">GoodsDto</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">GoodsConstant</span><span class="token punctuation">.</span><span class="token constant">GOODS</span> <span class="token operator">+</span> userId<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">CollectionUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token class-name">GoodsDtoList</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;命中了redis中的商品缓存数据，成功进入缓存---------------&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token class-name">GoodsDtoList</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
            <span class="token comment">//未命中redis中的缓存数据</span>
            <span class="token class-name">String</span> lockKey <span class="token operator">=</span> <span class="token class-name">RedisConstant</span><span class="token punctuation">.</span><span class="token constant">GOODS_LOCK</span> <span class="token operator">+</span> userId<span class="token punctuation">;</span>
            <span class="token comment">//尝试获取锁</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token keyword">boolean</span> isLock <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">tryLock</span><span class="token punctuation">(</span>lockKey<span class="token punctuation">,</span> userId<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>isLock<span class="token punctuation">)</span><span class="token punctuation">{</span>
                    <span class="token comment">//未获取到锁,休眠一段时间等待前一个线程重建缓存</span>
                    <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token class-name">RedisConstant</span><span class="token punctuation">.</span><span class="token constant">THREAD_SLEEP</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token comment">//重新获取,递归</span>
                    <span class="token keyword">return</span> <span class="token function">getList</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token comment">//获取到了锁</span>
                <span class="token comment">//再去redis中查询是否有缓存的数据</span>
                <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">GoodsDto</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">GoodsList</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">GoodsDto</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">GoodsConstant</span><span class="token punctuation">.</span><span class="token constant">GOODS</span> <span class="token operator">+</span> userId<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">CollectionUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token class-name">GoodsList</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;命中了双重检测redis中的商品缓存数据，成功进入缓存---------------&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">return</span> <span class="token class-name">GoodsList</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token comment">//根据商户id获取商户所属的店铺</span>
                <span class="token class-name">QueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Store</span><span class="token punctuation">&gt;</span></span> wrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                wrapper<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token string">&quot;user_id&quot;</span><span class="token punctuation">,</span>userId<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Store</span><span class="token punctuation">&gt;</span></span> stores <span class="token operator">=</span> storeMapper<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">CollectionUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>stores<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                    <span class="token comment">//如果数据中不存在则缓存空对象返回来解决redis缓存穿透,两分钟后过期</span>
                    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">UserDto</span><span class="token punctuation">&gt;</span></span> dtoList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    dtoList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">UserDto</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">GoodsConstant</span><span class="token punctuation">.</span><span class="token constant">GOODS</span> <span class="token operator">+</span> userId<span class="token punctuation">,</span>dtoList<span class="token punctuation">,</span><span class="token class-name">RedisConstant</span><span class="token punctuation">.</span><span class="token constant">CACHE_NULL_EXPIRE</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MINUTES</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
                    <span class="token comment">//进行缓存重建</span>
                    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">GoodsDto</span><span class="token punctuation">&gt;</span></span> goodsDtoList <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getGoodsDtoList</span><span class="token punctuation">(</span>stores<span class="token punctuation">,</span>userId<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">return</span> goodsDtoList<span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ServiceException</span><span class="token punctuation">(</span><span class="token class-name">ResponseEnum</span><span class="token punctuation">.</span><span class="token constant">ERROR</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>
                <span class="token comment">//释放锁</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">unLock</span><span class="token punctuation">(</span>lockKey<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong><mark>逻辑过期</mark></strong></p><img src="https://ice.frostsky.com/2024/03/05/4a8016d4ea953c618d68b72cb2a3fa99.png" alt="4a8016d4ea953c618d68b72cb2a3fa99.png" style="zoom:67%;"><h1 id="防重复提交-解决幂等" tabindex="-1"><a class="header-anchor" href="#防重复提交-解决幂等"><span>防重复提交(解决幂等)</span></a></h1><p><strong><mark>使用redis + lua脚本保证原子性操作</mark></strong></p><figure><img src="https://ice.frostsky.com/2024/03/10/e4f67e118c2bc9782088eba09296a61c.png" alt="e4f67e118c2bc9782088eba09296a61c.png" tabindex="0" loading="lazy"><figcaption>e4f67e118c2bc9782088eba09296a61c.png</figcaption></figure><blockquote><p><strong>lua脚本</strong></p></blockquote><div class="language-lua line-numbers-mode" data-ext="lua" data-title="lua"><pre class="language-lua"><code><span class="token keyword">if</span><span class="token punctuation">(</span>redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">&#39;get&#39;</span><span class="token punctuation">,</span> KEYS<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> ARGV<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">then</span>
<span class="token keyword">return</span> redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">&#39;del&#39;</span><span class="token punctuation">,</span> KEYS<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token number">0</span> <span class="token keyword">end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><strong>核心代码</strong></p></blockquote><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">DefaultRedisScript</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Boolean</span><span class="token punctuation">&gt;</span></span> <span class="token constant">REDIS_SCRIPT</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 静态代码块中初始化lua脚本
     */</span>
    <span class="token keyword">static</span> <span class="token punctuation">{</span>
        <span class="token constant">REDIS_SCRIPT</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultRedisScript</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Boolean</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//读取项目中的lua文件</span>
        <span class="token constant">REDIS_SCRIPT</span><span class="token punctuation">.</span><span class="token function">setLocation</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ClassPathResource</span><span class="token punctuation">(</span><span class="token string">&quot;unlock.lua&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token constant">REDIS_SCRIPT</span><span class="token punctuation">.</span><span class="token function">setResultType</span><span class="token punctuation">(</span><span class="token class-name">Boolean</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">saveOrderInfo</span><span class="token punctuation">(</span><span class="token class-name">OrderDto</span> orderDto<span class="token punctuation">,</span><span class="token class-name">String</span> orderId<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//TODO: 需要做防止重复提交和锁定库存操作</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>orderId<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ServiceException</span><span class="token punctuation">(</span><span class="token class-name">ResponseEnum</span><span class="token punctuation">.</span><span class="token constant">ORDER_ID_EXCEPTION</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">//lua脚本保证原子性操作</span>
        <span class="token comment">//拿着orderId到redis中查询</span>
        <span class="token comment">//如果redis中有相同orderId,则说明是正常提交订单，把redis中的orderId删除，</span>
        <span class="token comment">// 这个过程要保证原子性操作，由lua脚本保证。</span>
        <span class="token class-name">Boolean</span> flag <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Boolean</span><span class="token punctuation">)</span> redisTemplate<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token constant">REDIS_SCRIPT</span><span class="token punctuation">,</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token class-name">RedisConstant</span><span class="token punctuation">.</span><span class="token constant">ORDER_ID</span> <span class="token operator">+</span> orderId<span class="token punctuation">)</span><span class="token punctuation">,</span> orderId<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//如果redis中没有相同orderId,则说明是重复提交订单，不再往下进行</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>flag<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token comment">//返回false则说明是重复提交</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ServiceException</span><span class="token punctuation">(</span><span class="token class-name">ResponseEnum</span><span class="token punctuation">.</span><span class="token constant">DO_NOT_REPLACE_SUBMIT</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> 
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="redisson实现分布式锁" tabindex="-1"><a class="header-anchor" href="#redisson实现分布式锁"><span>redisson实现分布式锁</span></a></h1><h2 id="分布式锁实现库存锁定-解决商品超卖问题" tabindex="-1"><a class="header-anchor" href="#分布式锁实现库存锁定-解决商品超卖问题"><span><strong>分布式锁实现库存锁定，解决商品超卖问题</strong></span></a></h2><blockquote><p><strong>maven依赖</strong></p></blockquote><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token generics"><span class="token punctuation">&lt;</span>dependency<span class="token punctuation">&gt;</span></span>
      <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">&gt;</span></span>org<span class="token punctuation">.</span>redisson<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">&gt;</span>
      <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">&gt;</span></span>redisson<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">&gt;</span>
      <span class="token generics"><span class="token punctuation">&lt;</span>version<span class="token punctuation">&gt;</span></span><span class="token number">3.11</span><span class="token number">.2</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><strong>redisson配置类</strong></p></blockquote><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Data</span>
<span class="token annotation punctuation">@Configuration</span>
<span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span><span class="token string">&quot;spring.redis&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedissonConfig</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> host<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> addresses<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> password<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> port<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">int</span> timeout <span class="token operator">=</span> <span class="token number">3000</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> connectionPoolSize <span class="token operator">=</span> <span class="token number">64</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> connectionMinimumIdleSize<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> pingConnectionInterval <span class="token operator">=</span> <span class="token number">60000</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token constant">ADDRESS_PREFIX</span> <span class="token operator">=</span> <span class="token string">&quot;redis://&quot;</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 自动装配
     *
     */</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token class-name">RedissonClient</span> <span class="token function">redissonSingle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Config</span> config <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//  判断redis 的host是否为空</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>host<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">&quot;host is  empty&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">//  配置host，port等参数</span>
        <span class="token class-name">SingleServerConfig</span> serverConfig <span class="token operator">=</span> config<span class="token punctuation">.</span><span class="token function">useSingleServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token comment">//redis://127.0.0.1:7181</span>
                <span class="token punctuation">.</span><span class="token function">setAddress</span><span class="token punctuation">(</span><span class="token constant">ADDRESS_PREFIX</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>host <span class="token operator">+</span> <span class="token string">&quot;:&quot;</span> <span class="token operator">+</span> port<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>timeout<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">setPingConnectionInterval</span><span class="token punctuation">(</span>pingConnectionInterval<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">setConnectionPoolSize</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>connectionPoolSize<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">setConnectionMinimumIdleSize</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>connectionMinimumIdleSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//  判断进入redis 是否密码</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>password<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            serverConfig<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token class-name">Redisson</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="实战" tabindex="-1"><a class="header-anchor" href="#实战"><span>实战</span></a></h2><p><strong>接口逻辑：前端跳转到支付页面时获取订单id,在获取订单id的同时锁定商品库存。若订单中的商品全部锁定成功则返回订单id；若有一个商品锁定失败则将锁定的商品库存全部解锁，并返回商品库存锁定失败提示。</strong></p><p><strong>核心代码如下</strong></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 商品锁定实体
 */</span>
<span class="token annotation punctuation">@Data</span>
<span class="token annotation punctuation">@AllArgsConstructor</span>
<span class="token annotation punctuation">@NoArgsConstructor</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GoodsStockLockVo</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
     * 商品id
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> goodsId<span class="token punctuation">;</span>
    <span class="token doc-comment comment">/**
     * 锁定库存量
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> numbers<span class="token punctuation">;</span>
    <span class="token doc-comment comment">/**
     * 是否成功锁定库存标志
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">boolean</span> isLock<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><strong>getOrderId()获取订单号方法</strong></p></blockquote><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
    <span class="token annotation punctuation">@Transactional</span><span class="token punctuation">(</span>rollbackFor <span class="token operator">=</span> <span class="token class-name">Exception</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getOrderId</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> cartIds<span class="token punctuation">,</span><span class="token class-name">Integer</span> userId<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//生成一个唯一的订单id</span>
        <span class="token class-name">String</span> orderId <span class="token operator">=</span> <span class="token class-name">IdUtil</span><span class="token punctuation">.</span><span class="token function">getSnowflakeNextIdStr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">RedisConstant</span><span class="token punctuation">.</span><span class="token constant">ORDER_ID</span> <span class="token operator">+</span> orderId<span class="token punctuation">,</span>orderId<span class="token punctuation">,</span><span class="token class-name">RedisConstant</span><span class="token punctuation">.</span><span class="token constant">ORDER_CACHE_EXPIRE</span><span class="token punctuation">,</span><span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MINUTES</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//获取订单中的所有商品数据</span>
        <span class="token comment">//将所有商品数据转换为商品锁定实体</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">CollectionUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>cartIds<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">GoodsStockLockVo</span><span class="token punctuation">&gt;</span></span> stockLockVos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">GoodsStockLockVo</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>cartIds<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            cartIds<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>id <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
                <span class="token class-name">GoodsStockLockVo</span> goodsStockLockVo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GoodsStockLockVo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">Cart</span> cart <span class="token operator">=</span> baseMapper<span class="token punctuation">.</span><span class="token function">selectById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">Goods</span> goods <span class="token operator">=</span> goodsMapper<span class="token punctuation">.</span><span class="token function">selectById</span><span class="token punctuation">(</span>cart<span class="token punctuation">.</span><span class="token function">getGoodsId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                goodsStockLockVo<span class="token punctuation">.</span><span class="token function">setGoodsId</span><span class="token punctuation">(</span>goods<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                goodsStockLockVo<span class="token punctuation">.</span><span class="token function">setNumbers</span><span class="token punctuation">(</span>cart<span class="token punctuation">.</span><span class="token function">getNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                stockLockVos<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>goodsStockLockVo<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">//验证和锁定库存</span>
            <span class="token keyword">boolean</span> isLockSuccess <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">checkAndLock</span><span class="token punctuation">(</span>stockLockVos<span class="token punctuation">,</span> orderId<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>isLockSuccess<span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token comment">//库存锁定失败</span>
                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ServiceException</span><span class="token punctuation">(</span><span class="token class-name">ResponseEnum</span><span class="token punctuation">.</span><span class="token constant">GOODS_STOCK_FAIL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token comment">//将支付表的状态设置为待付款</span>
            asyncService<span class="token punctuation">.</span><span class="token function">savePayInfo</span><span class="token punctuation">(</span>orderId<span class="token punctuation">,</span> userId<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">//保存订单和购物车记录</span>
            asyncService<span class="token punctuation">.</span><span class="token function">saveOrderCart</span><span class="token punctuation">(</span>orderId<span class="token punctuation">,</span> userId<span class="token punctuation">,</span>cartIds<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">//库存锁定成功返回订单id</span>
            <span class="token keyword">return</span> orderId<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><strong>checkAndLock()商品库存是否锁定成功方法</strong></p></blockquote><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
     * 验证和锁定库存
     * <span class="token keyword">@param</span> <span class="token parameter">StockLockList</span>
     * <span class="token keyword">@param</span> <span class="token parameter">orderId</span>
     * <span class="token keyword">@return</span>
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">checkAndLock</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">GoodsStockLockVo</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">StockLockList</span><span class="token punctuation">,</span><span class="token class-name">String</span> orderId<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//判空</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">CollectionUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token class-name">StockLockList</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ServiceException</span><span class="token punctuation">(</span><span class="token class-name">ResponseEnum</span><span class="token punctuation">.</span><span class="token constant">GOODS_STOCK_FAIL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">//遍历每一个商品，验证并锁定库存，具备原子性</span>
        <span class="token class-name">StockLockList</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>item <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">checkLock</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//只要有一个商品库存锁定失败，所有锁定成功的商品都解锁</span>
        <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token class-name">StockLockList</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">anyMatch</span><span class="token punctuation">(</span>item <span class="token operator">-&gt;</span> <span class="token operator">!</span>item<span class="token punctuation">.</span><span class="token function">isLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token comment">//所有锁定成功的商品都解锁</span>
            <span class="token class-name">StockLockList</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token class-name">GoodsStockLockVo</span><span class="token operator">::</span><span class="token function">isLock</span><span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>stockLockVo <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
                        <span class="token comment">//解锁库存</span>
                        goodsMapper<span class="token punctuation">.</span><span class="token function">unLockStock</span><span class="token punctuation">(</span>stockLockVo<span class="token punctuation">.</span><span class="token function">getGoodsId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>stockLockVo<span class="token punctuation">.</span><span class="token function">getNumbers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">//返回失败状态</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">//如果所有商品都锁定成功，则缓存锁定库存数据，方便后续解锁和减库存</span>
        <span class="token comment">//TODO: 缓存设置时间为30</span>
        redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">RedisConstant</span><span class="token punctuation">.</span><span class="token constant">GOODS_STOCK_LOCK</span> <span class="token operator">+</span> orderId<span class="token punctuation">,</span><span class="token class-name">StockLockList</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><strong>checkLock()锁定库存方法</strong></p></blockquote><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
     * 锁定库存逻辑方法
     * <span class="token keyword">@param</span> <span class="token parameter">stockLockVo</span>
     * <span class="token keyword">@return</span>
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">checkLock</span><span class="token punctuation">(</span><span class="token class-name">GoodsStockLockVo</span> stockLockVo<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//获取锁</span>
        <span class="token comment">//公平锁</span>
        <span class="token class-name">RLock</span> rLock <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>redissonClient<span class="token punctuation">.</span><span class="token function">getFairLock</span><span class="token punctuation">(</span><span class="token class-name">RedisConstant</span><span class="token punctuation">.</span><span class="token constant">STOCK_LOCK</span> <span class="token operator">+</span> stockLockVo<span class="token punctuation">.</span><span class="token function">getGoodsId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//上锁</span>
        rLock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token comment">//验证库存</span>
            <span class="token class-name">Goods</span> goods <span class="token operator">=</span> goodsMapper<span class="token punctuation">.</span><span class="token function">checkStock</span><span class="token punctuation">(</span>stockLockVo<span class="token punctuation">.</span><span class="token function">getGoodsId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>stockLockVo<span class="token punctuation">.</span><span class="token function">getNumbers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">==</span> goods<span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token comment">//说明库存不足，锁定失败</span>
                stockLockVo<span class="token punctuation">.</span><span class="token function">setLock</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token comment">//锁定库存</span>
            <span class="token comment">//就是一个更新操作</span>
            <span class="token class-name">Integer</span> rows <span class="token operator">=</span> goodsMapper<span class="token punctuation">.</span><span class="token function">lockStock</span><span class="token punctuation">(</span>stockLockVo<span class="token punctuation">.</span><span class="token function">getGoodsId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>stockLockVo<span class="token punctuation">.</span><span class="token function">getNumbers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>rows <span class="token operator">&gt;=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token comment">//成功锁定</span>
                stockLockVo<span class="token punctuation">.</span><span class="token function">setLock</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>
            <span class="token comment">//解锁</span>
            rLock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><strong>dao操作</strong></p></blockquote><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token prolog">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
<span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">mapper</span> <span class="token name">PUBLIC</span> <span class="token string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="token string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.qs.mapper.GoodsMapper<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>goodsInfoMap<span class="token punctuation">&quot;</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.qs.pojo.entity.Goods<span class="token punctuation">&quot;</span></span> <span class="token attr-name">autoMapping</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>true<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>

    <span class="token comment">&lt;!--验证库存--&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>checkStock<span class="token punctuation">&quot;</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>goodsInfoMap<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        select * from qs_goods
        where id = #{goodsId} and number - lock_stock &gt; #{numbers} for update
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span>

    <span class="token comment">&lt;!--锁定库存--&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>update</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>lockStock<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        update qs_goods
        set lock_stock = lock_stock + #{numbers}
        where id = #{goodsId}
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>update</span><span class="token punctuation">&gt;</span></span>

    <span class="token comment">&lt;!--解锁库存--&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>update</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>unLockStock<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        update qs_goods
        set lock_stock = lock_stock - #{numbers}
        where id = #{goodsId}
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>update</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">&gt;</span></span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,85),o=[e];function c(l,i){return s(),a("div",null,o)}const r=n(p,[["render",c],["__file","SpringBoot集成Redis.html.vue"]]),d=JSON.parse('{"path":"/posts/%E5%90%8E%E7%AB%AF/%E5%AE%9E%E6%88%98/SpringBoot%E9%9B%86%E6%88%90Redis.html","title":"SpringBoot集成Redis","lang":"zh-CN","frontmatter":{"icon":"pen-to-square","date":"2024-03-10T00:00:00.000Z","category":["后端"],"tag":["SpringBoot","Redis","实战"],"star":true,"sticky":true,"description":"SpringBoot集成Redis 整合主要讲解redis缓存更新策略、缓存三大问题解决方案以及使用Lua脚本解决幂等问题 整合 导入依赖 yml配置文件 Key Value 序列化 缓存 缓存更新策略 业务场景 低一致性需求：使用内存淘汰机制。 高一致性需求：主动更新，并以超时剔除作为兜底方案。 三个问题需要考虑： （1）删除缓存还是更新缓存？ 更新...","head":[["meta",{"property":"og:url","content":"https://swx08.github.io/vuepress/posts/%E5%90%8E%E7%AB%AF/%E5%AE%9E%E6%88%98/SpringBoot%E9%9B%86%E6%88%90Redis.html"}],["meta",{"property":"og:site_name","content":"文学博客"}],["meta",{"property":"og:title","content":"SpringBoot集成Redis"}],["meta",{"property":"og:description","content":"SpringBoot集成Redis 整合主要讲解redis缓存更新策略、缓存三大问题解决方案以及使用Lua脚本解决幂等问题 整合 导入依赖 yml配置文件 Key Value 序列化 缓存 缓存更新策略 业务场景 低一致性需求：使用内存淘汰机制。 高一致性需求：主动更新，并以超时剔除作为兜底方案。 三个问题需要考虑： （1）删除缓存还是更新缓存？ 更新..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://ice.frostsky.com/2024/03/05/8f30241f4a924a734157ba22a51bc72f.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:alt","content":"SpringBoot集成Redis"}],["meta",{"property":"article:author","content":"sixkey"}],["meta",{"property":"article:tag","content":"SpringBoot"}],["meta",{"property":"article:tag","content":"Redis"}],["meta",{"property":"article:tag","content":"实战"}],["meta",{"property":"article:published_time","content":"2024-03-10T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"SpringBoot集成Redis\\",\\"image\\":[\\"https://ice.frostsky.com/2024/03/05/8f30241f4a924a734157ba22a51bc72f.png\\",\\"https://ice.frostsky.com/2024/03/05/2ed2ad626e4cf23bb5de7a205d98b513.png\\",\\"https://ice.frostsky.com/2024/03/05/3765c356f0617e06ec5e94b65e44dca0.png\\",\\"https://ice.frostsky.com/2024/03/05/31e844250335c6063d24e88449660556.png\\",\\"https://ice.frostsky.com/2024/03/10/e4f67e118c2bc9782088eba09296a61c.png\\"],\\"datePublished\\":\\"2024-03-10T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"sixkey\\",\\"url\\":\\"https://swx08.github.io\\"}]}"]]},"headers":[{"level":2,"title":"缓存更新策略","slug":"缓存更新策略","link":"#缓存更新策略","children":[]},{"level":2,"title":"缓存三大问题解决方案","slug":"缓存三大问题解决方案","link":"#缓存三大问题解决方案","children":[{"level":3,"title":"缓存穿透","slug":"缓存穿透","link":"#缓存穿透","children":[]},{"level":3,"title":"缓存雪崩","slug":"缓存雪崩","link":"#缓存雪崩","children":[]},{"level":3,"title":"缓存击穿","slug":"缓存击穿","link":"#缓存击穿","children":[]}]},{"level":2,"title":"分布式锁实现库存锁定，解决商品超卖问题","slug":"分布式锁实现库存锁定-解决商品超卖问题","link":"#分布式锁实现库存锁定-解决商品超卖问题","children":[]},{"level":2,"title":"实战","slug":"实战","link":"#实战","children":[]}],"git":{},"readingTime":{"minutes":9.01,"words":2704},"filePathRelative":"posts/后端/实战/SpringBoot集成Redis.md","localizedDate":"2024年3月10日","excerpt":"\\n<p><strong>整合主要讲解redis缓存更新策略、缓存三大问题解决方案以及使用Lua脚本解决幂等问题</strong></p>\\n<h1><strong>整合</strong></h1>\\n<blockquote>\\n<p><strong>导入依赖</strong></p>\\n</blockquote>\\n<div class=\\"language-java\\" data-ext=\\"java\\" data-title=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token operator\\">&lt;</span><span class=\\"token operator\\">!</span><span class=\\"token operator\\">--</span>redis<span class=\\"token operator\\">--</span><span class=\\"token operator\\">&gt;</span>\\n    <span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span>dependency<span class=\\"token punctuation\\">&gt;</span></span>\\n      <span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span>groupId<span class=\\"token punctuation\\">&gt;</span></span>org<span class=\\"token punctuation\\">.</span>springframework<span class=\\"token punctuation\\">.</span>boot<span class=\\"token operator\\">&lt;</span><span class=\\"token operator\\">/</span>groupId<span class=\\"token operator\\">&gt;</span>\\n      <span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span>artifactId<span class=\\"token punctuation\\">&gt;</span></span>spring<span class=\\"token operator\\">-</span>boot<span class=\\"token operator\\">-</span>starter<span class=\\"token operator\\">-</span>data<span class=\\"token operator\\">-</span>redis<span class=\\"token operator\\">&lt;</span><span class=\\"token operator\\">/</span>artifactId<span class=\\"token operator\\">&gt;</span>\\n    <span class=\\"token operator\\">&lt;</span><span class=\\"token operator\\">/</span>dependency<span class=\\"token operator\\">&gt;</span>\\n\\n    <span class=\\"token operator\\">&lt;</span><span class=\\"token operator\\">!</span><span class=\\"token operator\\">--</span>线程池pool<span class=\\"token operator\\">--</span><span class=\\"token operator\\">&gt;</span>\\n    <span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span>dependency<span class=\\"token punctuation\\">&gt;</span></span>\\n      <span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span>groupId<span class=\\"token punctuation\\">&gt;</span></span>org<span class=\\"token punctuation\\">.</span>apache<span class=\\"token punctuation\\">.</span>commons<span class=\\"token operator\\">&lt;</span><span class=\\"token operator\\">/</span>groupId<span class=\\"token operator\\">&gt;</span>\\n      <span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span>artifactId<span class=\\"token punctuation\\">&gt;</span></span>commons<span class=\\"token operator\\">-</span>pool2<span class=\\"token operator\\">&lt;</span><span class=\\"token operator\\">/</span>artifactId<span class=\\"token operator\\">&gt;</span>\\n    <span class=\\"token operator\\">&lt;</span><span class=\\"token operator\\">/</span>dependency<span class=\\"token operator\\">&gt;</span>\\n</code></pre></div>","autoDesc":true}');export{r as comp,d as data};
