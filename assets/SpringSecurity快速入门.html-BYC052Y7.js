import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as c,c as i,b as n,d as s,e as t,a as e}from"./app-DCsLG_oX.js";const l={},u=e('<h1 id="springsecurity" tabindex="-1"><a class="header-anchor" href="#springsecurity"><span>SpringSecurity</span></a></h1><h2 id="介绍" tabindex="-1"><a class="header-anchor" href="#介绍"><span>介绍</span></a></h2><h3 id="_1、简介" tabindex="-1"><a class="header-anchor" href="#_1、简介"><span>1、简介</span></a></h3><p>Spring 是非常流行和成功的 Java 应用开发框架，Spring Security 正是 Spring 家族中的成员。Spring Security 基于 Spring 框架，提供了一套 Web 应用安全性的完整解决方案。</p><p>正如你可能知道的关于安全方面的两个核心功能是“<strong>认证</strong>”和“<strong>授权</strong>”，一般来说，Web 应用的安全性包括**用户认证（Authentication）和用户授权（Authorization）**两个部分，这两点也是 SpringSecurity 重要核心功能。</p><p>（1）用户认证指的是：验证某个用户是否为系统中的合法主体，也就是说用户能否访问该系统。用户认证一般要求用户提供用户名和密码，系统通过校验用户名和密码来完成认证过程。</p><p><strong>通俗点说就是系统认为用户是否能登录</strong></p><p>（2）用户授权指的是验证某个用户是否有权限执行某个操作。在一个系统中，不同用户所具有的权限是不同的。比如对一个文件来说，有的用户只能进行读取，而有的用户可以进行修改。一般来说，系统会为不同的用户分配不同的角色，而每个角色则对应一系列的权限。</p><p><strong>通俗点讲就是系统判断用户是否有权限去做某些事情。</strong></p><h3 id="_2、同款产品对比" tabindex="-1"><a class="header-anchor" href="#_2、同款产品对比"><span>2、同款产品对比</span></a></h3><h4 id="_3-1、spring-security" tabindex="-1"><a class="header-anchor" href="#_3-1、spring-security"><span>3.1、Spring Security</span></a></h4><p>Spring 技术栈的组成部分。</p><p>https://spring.io/projects/spring-security</p><p>通过提供完整可扩展的认证和授权支持保护你的应用程序。</p><p><strong>SpringSecurity 特点：</strong></p><p>⚫ 和 Spring 无缝整合。</p><p>⚫ 全面的权限控制。</p><p>⚫ 专门为 Web 开发而设计。</p><p>​ ◼旧版本不能脱离 Web 环境使用。</p><p>​ ◼新版本对整个框架进行了分层抽取，分成核心模块和 Web 模块。单独引入核心模块就可以脱离 Web 环境。</p><p>⚫ 重量级。</p><h4 id="_3-2、-shiro" tabindex="-1"><a class="header-anchor" href="#_3-2、-shiro"><span>3.2、 Shiro</span></a></h4><p>Apache 旗下的轻量级权限控制框架。</p><p><strong>特点：</strong></p><p>⚫ 轻量级。Shiro 主张的理念是把复杂的事情变简单。针对对性能有更高要求的互联网应用有更好表现。</p><p>⚫ 通用性。</p><p>​ ◼好处：不局限于 Web 环境，可以脱离 Web 环境使用。</p><p>​ ◼缺陷：在 Web 环境下一些特定的需求需要手动编写代码定制。</p><p>Spring Security 是 Spring 家族中的一个安全管理框架，实际上，在 Spring Boot 出现之前，Spring Security 就已经发展了多年了，但是使用的并不多，安全管理这个领域，一直是 Shiro 的天下。</p><p>相对于 Shiro，在 SSM 中整合 Spring Security 都是比较麻烦的操作，所以，Spring Security 虽然功能比 Shiro 强大，但是使用反而没有 Shiro 多（Shiro 虽然功能没有Spring Security 多，但是对于大部分项目而言，Shiro 也够用了）。自从有了 Spring Boot 之后，Spring Boot 对于 Spring Security 提供了自动化配置方案，可以使用更少的配置来使用 Spring Security。</p>',30),r={href:"https://so.csdn.net/so/search?q=AOP&spm=1001.2101.3001.7020",target:"_blank",rel:"noopener noreferrer"},k=n("p",null,"Spring Security进行认证和鉴权的时候,就是利用的一系列的Filter来进行拦截的。",-1),d=n("figure",null,[n("img",{src:"http://rsslo5plk.hn-bkt.clouddn.com/20201231155747261.png",alt:"",tabindex:"0",loading:"lazy"}),n("figcaption")],-1),v=n("p",null,[s("如图所示，一个请求想要访问到API就会从左到右经过蓝线框里的过滤器，其中"),n("strong",null,"绿色部分是负责认证的过滤器，蓝色部分是负责异常处理，橙色部分则是负责授权"),s("。进过一系列拦截最终访问到我们的API。")],-1),m={href:"https://imgse.com/i/ppHKlm8",target:"_blank",rel:"noopener noreferrer"},b=n("img",{src:"https://s1.ax1x.com/2023/04/08/ppHKlm8.md.png",alt:"ppHKlm8.md.png",tabindex:"0",loading:"lazy"},null,-1),h=n("figcaption",null,"ppHKlm8.md.png",-1),g=e(`<p>这里面我们只需要重点关注两个过滤器即可：<code>UsernamePasswordAuthenticationFilter</code>负责登录认证，<code>FilterSecurityInterceptor</code>负责权限授权。</p><p>说明：<strong>Spring Security的核心逻辑全在这一套过滤器中，过滤器里会调用各种组件完成功能，掌握了这些过滤器和组件你就掌握了Spring Security</strong>！这个框架的使用方式就是对这些过滤器和组件进行扩展。</p><h2 id="一、学习目标" tabindex="-1"><a class="header-anchor" href="#一、学习目标"><span>一、学习目标:</span></a></h2><h3 id="_1-1、简单了解" tabindex="-1"><a class="header-anchor" href="#_1-1、简单了解"><span>1.1、简单了解</span></a></h3><ul><li>了解Spring Security的安全管理功能</li><li>了解Spring Security的安全配置</li><li>掌握Spring Security的用户认证</li><li>掌握Spring Security的权限管理</li><li>Spring Security控制前端页面实现</li></ul><h2 id="二、快速入门" tabindex="-1"><a class="header-anchor" href="#二、快速入门"><span>二、快速入门</span></a></h2><h3 id="_2-1、主要概念" tabindex="-1"><a class="header-anchor" href="#_2-1、主要概念"><span>2.1、主要概念：</span></a></h3><ul><li>认证：Authentication</li><li>授权：Authenrization</li></ul><h3 id="_2-2、基础配置" tabindex="-1"><a class="header-anchor" href="#_2-2、基础配置"><span>2.2、基础配置</span></a></h3><p>1、导入项目</p><p>2、导入Spring Security依赖</p><p>3、配置Spring Security安全管理</p><h3 id="_2-3、搭建安全管理测试环境" tabindex="-1"><a class="header-anchor" href="#_2-3、搭建安全管理测试环境"><span>2.3、搭建安全管理测试环境</span></a></h3><p>1、只要已导入Spring Security相关依赖：Spring就提供了一个Spring Security的启动器。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>一旦引入了<span class="token class-name">Spring</span> <span class="token class-name">Security</span>的启动器，<span class="token class-name">Spring</span> <span class="token class-name">Security</span>、<span class="token class-name">WebFlux</span>的相关的安全功能部分已经生效。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2、Spring Security的配置。</p><p>3、启动项目后会在控制台输出Spring Security登录密码。</p><p>4、访问localhost:8080地址的时候，安全框架自动拦截了目标访问的资源，直接跳转到http://localhost:8080/login页面进行用户登录认证。</p><p>5、默认情况下，安全框架生成的登录页面，默认值为</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>用户名：user
密码<span class="token operator">:</span>项目启动时控制台输出的密码
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-4、mvc-security安全配置介绍" tabindex="-1"><a class="header-anchor" href="#_2-4、mvc-security安全配置介绍"><span>2.4、MVC Security安全配置介绍</span></a></h3><p>使用Spring boot和Spring MVC进行项目开发时，如果项目引入spring-boot-starter-security依赖启动器，MVC Security安全管理功能就会自动生效，其默认的安全配置是在SecutiryAutoConfiguration和UserDetailsSeviceAutoConfiguration中实现的。其中，SecutiryAutoConfiguration会导入并自动化配置SpringBootWebSecurityConfiguration用于启动Web安全管理，UserDetailsSeviceAutoConfiguration则用于配置用户身份信息。</p><p>通过自定义WebSecurityConfigurerAdapter类型的Bean组件，可以完全关闭Security提供的Web应用默认安全配置，但是不会关闭UserDetailsService用户信息自动配置类。如果要关闭UserDetailsService默认用户信息配置，</p><p>可以自定义UserDetailsService、AuthenticationProvider或AuthenticationManager类型的Bean组件。另外，可以通过自定义WebSecurityConfigurerAdapter类型的Bean组件覆盖默认访问规则。Spring Boot提供了非常多方便的方法，可用于覆盖请求映射和静态资源的访问规则。</p><p><strong>自定义安全管理模块：</strong></p><ul><li>WebSecurityConfigurerAdapter用来管理安全框架的配置，如果开发者自定义安全管理，需要实现这个接口。自定义一个类，然后实现接口或者其他类，配置类由@Configration注解修饰。</li><li>实现抽象方法，或者重写父类或者父接口中的部分方法。</li></ul><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>configure(AuthenticationManagerBuilder auth)</td><td>定制用户认证管理器来实现用户认证(认证)</td></tr><tr><td>configre(HttpSecurity http)</td><td>定制基于HTTP请求的用户访问控制(授权)</td></tr></tbody></table><h2 id="三、认证及授权" tabindex="-1"><a class="header-anchor" href="#三、认证及授权"><span>三、认证及授权</span></a></h2><p>WebSecurityConfigurerAdapter提供了5中自定义认证。使用了configure(AuthenticationManagerBuilder auth)方法来完成用户的自定义认证。</p><p>自定义用户认证方式分类见下：学习前三种认证方式。</p><ul><li>内存身份认证</li><li>JDBC身份认证</li><li>身份详情服务认证(这里主讲)</li><li>LDAP身份认证(了解)</li><li>身份认证提供商(了解)</li></ul><p>我在这里主要学习了身份详情服务认证</p><h3 id="_3-1、认证管理" tabindex="-1"><a class="header-anchor" href="#_3-1、认证管理"><span>3.1、认证管理</span></a></h3><h4 id="_1、前期准备" tabindex="-1"><a class="header-anchor" href="#_1、前期准备"><span>1、前期准备</span></a></h4><p>假设我们已经准备了有实体类Customer、Authority；CustomerMapper、CustomerService、CustomerServiceImpl</p><h4 id="_2、userdetailsservice身份认证使用" tabindex="-1"><a class="header-anchor" href="#_2、userdetailsservice身份认证使用"><span>2、UserDetailsService身份认证使用</span></a></h4><p>UserDetailsService是Spring安全框架提供的一个接口。用来封装用户的自定义权限信息(Customer、Authority)</p><p>UserDetailsService是一个接口，它有一个loadUserByUsername(String username)抽象方法,通过指定用户名来加载对应的用户信息，还可以进行权限的校验。</p><p>具体使用：因为它是Spring官方提供的一个接口，所以我们的任务是编写一个实现类UserDetailsServiceImpl自定义实现loadUserByUsername(String username)抽象方法，通过UserDetailsServiceImpl编写自定义的认证规则。</p><p>UserDetailsServiceImpl实现类如下：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Service</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserDetailsServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserDetailsService</span><span class="token punctuation">{</span>
    
    <span class="token comment">//权限认证层依赖于用户模块的业务层</span>
    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">CustomerService</span> customerService<span class="token punctuation">;</span>
    
    <span class="token comment">//会被自动回调，会将登录表单中用户的名称传递给该方法</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">UserDetails</span> <span class="token function">loadUserByUsername</span><span class="token punctuation">(</span><span class="token class-name">String</span> username<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">UsernameNotFoundException</span><span class="token punctuation">{</span>
        <span class="token comment">//通过业务层调用，查询用户信息</span>
        <span class="token class-name">Customer</span> customer <span class="token operator">=</span> customerService<span class="token punctuation">.</span><span class="token function">getCustomer</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//通过业务层调用，获取指定用户的权限信息</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Authority</span><span class="token punctuation">&gt;</span></span> authorityes <span class="token operator">=</span> customerService<span class="token punctuation">.</span><span class="token function">getCustomerAuthority</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//我们自己获取到的authorityes权限信息不能直接使用，需要封装成Spring官方指定的SimpleGrantedAuthority类，我们通过stream流实现authorityes封装，源码分析如下</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SimpleGrantedAuthority</span><span class="token punctuation">&gt;</span></span> authorityList <span class="token operator">=</span> authorityes<span class="token punctuation">.</span>stream<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>authority <span class="token operator">-&gt;</span> <span class="token keyword">new</span> <span class="token class-name">SimpleGrantedAuthority</span><span class="token punctuation">(</span>authority<span class="token punctuation">.</span><span class="token function">getAuthority</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//UserDetails对象表示封装了：当前的用户以及当前用户的权限信息，返回给安全框架。</span>
        <span class="token comment">//所以我们还需进一步将我们自定义的用户对象以及权限信息封装成Spring官方提供的User类型,user()源码分析如下：</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>customer <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token class-name">UserDetails</span> userDetails <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span>customer<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>customer<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>authorityList<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> userDetails<span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UsernameNotFoundException</span><span class="token punctuation">(</span><span class="token string">&quot;此用户不存在&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>SimpleGrantedAuthority源码分析：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">SimpleGrantedAuthority</span> <span class="token keyword">implements</span> <span class="token class-name">GrantedAuthority</span><span class="token punctuation">{</span>
    <span class="token comment">//1.序列化ID:通过序列化的ID值来唯一的标识一个对象</span>
    <span class="token comment">//2.序列化ID:反序列化需要使用</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token number">570L</span><span class="token punctuation">;</span>
    <span class="token comment">//权限：期望接收一个权限的字符串的取值</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> role<span class="token punctuation">;</span>
    
    <span class="token comment">//....</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>User()实现了UserDetails，源码如下:</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">//Spring安全框架提供的user实体类</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token keyword">implements</span> <span class="token class-name">UserDetails</span><span class="token punctuation">,</span> <span class="token class-name">CredentialsContainer</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token number">530L</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Log</span> logger <span class="token operator">=</span> <span class="token class-name">LogFactory</span><span class="token punctuation">.</span><span class="token function">getLog</span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//主要关注一下这三属性，我们就是将我们的自定义对象及权限封装到User这个对象的这三属性</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> password<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> username<span class="token punctuation">;</span>
    <span class="token comment">//权限</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">GrantedAuthority</span><span class="token punctuation">&gt;</span></span> authorities<span class="token punctuation">;</span>
    
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> accountNonExpired<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> accountNonLocked<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> credentialsNonExpired<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> enabled<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token class-name">String</span> username<span class="token punctuation">,</span> <span class="token class-name">String</span> password<span class="token punctuation">,</span> <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">GrantedAuthority</span><span class="token punctuation">&gt;</span></span> authorities<span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">(</span>username<span class="token punctuation">,</span> password<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> authorities<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上是认证的第一步，第二步回到配置类SecurityConfig中</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">//@EnableWebSecurity是开启SpringSecurity的默认行为</span>
<span class="token annotation punctuation">@EnableWebSecurity</span>
<span class="token comment">//开启基于方法的安全认证机制，也就是说在web层的controller启用注解机制的安全确认</span>
<span class="token annotation punctuation">@EnableGlobalMethodSecurity</span><span class="token punctuation">(</span>prePostEnabled <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
<span class="token comment">//继承WebSecurityConfigurerAdapter</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SecurityConfig</span> <span class="token keyword">extends</span> <span class="token class-name">WebSecurityConfigurerAdapter</span><span class="token punctuation">{</span>
    <span class="token comment">//声明一个UserDetailsService对象</span>
    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">UserDetailsService</span> userDetailsService<span class="token punctuation">;</span>
    
    <span class="token doc-comment comment">/**
    自定义用户认证的管理
    */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span><span class="token class-name">AuthenticationManagerBuilder</span> auth<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">{</span>
        <span class="token comment">//注意必须构建一个密码的编码器</span>
        <span class="token class-name">BCryptPasswordEncoder</span> encoder <span class="token operator">=</span> <span class="token keyword">new</span>  <span class="token class-name">BCryptPasswordEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//设置认证方式为UserDetailsService的方式</span>
        auth<span class="token punctuation">.</span><span class="token function">userDetailsService</span><span class="token punctuation">(</span>userDetailsService<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">passwordEncoder</span><span class="token punctuation">(</span>encoder<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上只是认证功能的实现，授权如下：</p><h3 id="_3-2、授权管理" tabindex="-1"><a class="header-anchor" href="#_3-2、授权管理"><span>3.2、授权管理</span></a></h3><h4 id="_3-2-1、授权分析" tabindex="-1"><a class="header-anchor" href="#_3-2-1、授权分析"><span>3.2.1、授权分析</span></a></h4><p>1、重写WebSecurityConfigurerAdapter类中的configure(HttpSecurity http)方法。此方法是基于HTTP请求的协议来进行权限控制(就是判断当前的请求地址是否可以被放行处理).</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>authorizeRequests()</td><td>开启基于HttpServletRequest请求访问的限制</td></tr><tr><td>formLogin()</td><td>开启基于表单的用户登录</td></tr><tr><td>httpBasic()</td><td>开启基于HTTP请求的Basic认证登录</td></tr><tr><td>logout()</td><td>开启退出登录的支持</td></tr><tr><td>sessionManagerment()</td><td>开启Session管理配置</td></tr><tr><td>rememberMe()</td><td>开启记住我功能</td></tr><tr><td>csrf()</td><td>开启CSRF跨域请求伪造防护功能</td></tr></tbody></table><p>授权功能实现如下：回到配置类中SecurityConfig,添加如下方法即可。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span><span class="token class-name">HttpSecurity</span> http<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token comment">// 这是配置的关键，决定哪些接口开启防护，哪些接口绕过防护</span>
        http
                <span class="token comment">//关闭csrf跨站请求伪造</span>
                <span class="token punctuation">.</span><span class="token function">csrf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">disable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token comment">// 开启跨域以便前端调用接口</span>
                <span class="token punctuation">.</span><span class="token function">cors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">authorizeRequests</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">antMatchers</span><span class="token punctuation">(</span><span class="token string">&quot;/login/**&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">permtitAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//放行静态资源下</span>
                <span class="token comment">// 指定某些接口不需要通过验证即可访问。登陆接口肯定是不需要认证的</span>
                <span class="token punctuation">.</span><span class="token function">antMatchers</span><span class="token punctuation">(</span><span class="token string">&quot;/admin/system/index/login&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">permitAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token comment">// 这里意思是其它所有接口需要认证才能访问</span>
                <span class="token punctuation">.</span><span class="token function">anyRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">authenticated</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token comment">//TokenAuthenticationFilter放到UsernamePasswordAuthenticationFilter的前面，这样做就是为了除了登录的时候去查询数据库外，其他时候都用token进行认证。</span>
                <span class="token punctuation">.</span><span class="token function">addFilterBefore</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TokenAuthenticationFilter</span><span class="token punctuation">(</span>redisTemplate<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">UsernamePasswordAuthenticationFilter</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">addFilter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TokenLoginFilter</span><span class="token punctuation">(</span><span class="token function">authenticationManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>redisTemplate<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//禁用session</span>
        http<span class="token punctuation">.</span><span class="token function">sessionManagement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sessionCreationPolicy</span><span class="token punctuation">(</span><span class="token class-name">SessionCreationPolicy</span><span class="token punctuation">.</span><span class="token constant">STATELESS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>


<span class="token doc-comment comment">/**
     * 配置哪些请求不拦截
     * 排除swagger相关请求
     * <span class="token keyword">@param</span> <span class="token parameter">web</span>
     * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">Exception</span></span>
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span><span class="token class-name">WebSecurity</span> web<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        web<span class="token punctuation">.</span><span class="token function">ignoring</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">antMatchers</span><span class="token punctuation">(</span><span class="token string">&quot;/admin/modeler/**&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;/diagram-viewer/**&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;/editor-app/**&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;/*.html&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;/admin/processImage/**&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;/admin/wechat/authorize&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;/admin/wechat/userInfo&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;/admin/wechat/bindPhone&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;/favicon.ico&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;/swagger-resources/**&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;/webjars/**&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;/v2/**&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;/swagger-ui.html/**&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;/doc.html&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-3、自定义登录页面控制" tabindex="-1"><a class="header-anchor" href="#_3-3、自定义登录页面控制"><span>3.3、自定义登录页面控制</span></a></h3><h4 id="_1、配置" tabindex="-1"><a class="header-anchor" href="#_1、配置"><span>1、配置</span></a></h4><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span><span class="token class-name">HttpSecurity</span> http<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
    http<span class="token punctuation">.</span><span class="token function">formLogin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//基于表单的用户登录验证开启</span>
        <span class="token punctuation">.</span><span class="token function">loginPage</span><span class="token punctuation">(</span><span class="token string">&quot;/userLogin&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">permitAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//放行当前请求；默认情况下，表单中的用户username、密码password,如果按照默认规则编写表单，会将参数自动传递给后台安全框架</span>
        <span class="token punctuation">.</span><span class="token function">usernameParameter</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">passwordParameter</span><span class="token punctuation">(</span><span class="token string">&quot;pwd&quot;</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">defaultSuccessUrl</span><span class="token punctuation">(</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">)</span><span class="token comment">//如果用户和密码验证成功，则打开那一个页面</span>
        <span class="token punctuation">.</span><span class="token function">failureUrl</span><span class="token punctuation">(</span><span class="token string">&quot;/userLogin?error&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//如果登录的用户或密码输出错误，则打开登录页面  </span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2、注意" tabindex="-1"><a class="header-anchor" href="#_2、注意"><span>2、注意：</span></a></h4><p>要在授权管理中放行login下的静态资源</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token punctuation">.</span><span class="token function">antMatchers</span><span class="token punctuation">(</span><span class="token string">&quot;/login/**&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">permitAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_3-4、自定义退出登录" tabindex="-1"><a class="header-anchor" href="#_3-4、自定义退出登录"><span>3.4、自定义退出登录</span></a></h3><h4 id="配置" tabindex="-1"><a class="header-anchor" href="#配置"><span>配置</span></a></h4><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>http<span class="token punctuation">.</span><span class="token function">logout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//表示自定义用户的退出功能</span>
    <span class="token punctuation">.</span><span class="token function">logoutUrl</span><span class="token punctuation">(</span><span class="token string">&quot;/mylogout&quot;</span><span class="token punctuation">)</span><span class="token comment">//表示什么样的url请求会触发退出登录</span>
    <span class="token punctuation">.</span><span class="token function">logoutSuccessUrl</span><span class="token punctuation">(</span><span class="token string">&quot;/userLogin&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//表示如果用户退出登录操作成功，跳转到指定的页面(login.html页面)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="四、结合jwt-redis" tabindex="-1"><a class="header-anchor" href="#四、结合jwt-redis"><span>四、结合JWT+Redis</span></a></h2><h3 id="_4-1、思路分析" tabindex="-1"><a class="header-anchor" href="#_4-1、思路分析"><span>4.1、思路分析</span></a></h3><p>登录</p><p>​ ①自定义登录接口</p><p>​ 调用ProviderManager的方法进行认证 如果认证通过生成jwt</p><p>​ 把用户信息存入redis中</p><p>​ ②自定义UserDetailsService</p><p>​ 在这个实现类中去查询数据库</p><p>校验：</p><p>​ ①定义Jwt认证过滤器</p><p>​ 获取token</p><p>​ 解析token获取其中的userid</p><p>​ 从redis中获取用户信息</p><p>​ 存入SecurityContextHolder</p><h3 id="_4-2、引入" tabindex="-1"><a class="header-anchor" href="#_4-2、引入"><span>4.2、引入</span></a></h3><p>根据以上入门的学习，我们需要去继承WebSecurityConfigurerAdapter写一个自己的配置类；需要去实现UserDetailsService自定义自己的loadUser方法，重写loadUser方法，在封装权限时需要封装成SimpleGrantedAuthority对象；最后还需封装成UserDetails对象返回。以上我们是通过Spring Security官方提供的User()对象返回。</p><p>但是实际中我们一般是数据库中具体的用户实体类比如Customer类，我们让Customer去继承User()类</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomUser</span> <span class="token keyword">extends</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
     * 我们自己的用户实体对象，要调取用户信息时直接获取这个实体对象。（这里我就不写get/set方法了）
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">SysUser</span> sysUser<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">CustomUser</span><span class="token punctuation">(</span><span class="token class-name">SysUser</span> sysUser<span class="token punctuation">,</span> <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">GrantedAuthority</span><span class="token punctuation">&gt;</span></span> authorities<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>sysUser<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> sysUser<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> authorities<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>sysUser <span class="token operator">=</span> sysUser<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">SysUser</span> <span class="token function">getSysUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> sysUser<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setSysUser</span><span class="token punctuation">(</span><span class="token class-name">SysUser</span> sysUser<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>sysUser <span class="token operator">=</span> sysUser<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>loadUser方法的返回值也会有所改变:直接返回Customer对象，因为它已经继承User(),而User()实现了UserDetails，所以返回的就是Userdetails对象。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>
<span class="token doc-comment comment">/**
 * 根据用户名获取用户对象
 */</span>
<span class="token annotation punctuation">@Service</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserDetailsServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserDetailsService</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">SysUserService</span> sysUserService<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">SysMenuService</span> sysMenuService<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">UserDetails</span> <span class="token function">loadUserByUsername</span><span class="token punctuation">(</span><span class="token class-name">String</span> username<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">UsernameNotFoundException</span> <span class="token punctuation">{</span>
        <span class="token class-name">SysUser</span> sysUser <span class="token operator">=</span> sysUserService<span class="token punctuation">.</span><span class="token function">getByUsername</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>sysUser <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UsernameNotFoundException</span><span class="token punctuation">(</span><span class="token string">&quot;用户名不存在！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>sysUser<span class="token punctuation">.</span><span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">&quot;账号已停用&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">//根据userId查询用户操作权限数据</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> userPermsList <span class="token operator">=</span> sysMenuService<span class="token punctuation">.</span><span class="token function">findUserPermsListByUserId</span><span class="token punctuation">(</span>sysUser<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//创建list集合，封装最终权限数据</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SimpleGrantedAuthority</span><span class="token punctuation">&gt;</span></span> authorityList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//查询list集合遍历</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> perm <span class="token operator">:</span> userPermsList<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            authorityList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SimpleGrantedAuthority</span><span class="token punctuation">(</span>perm<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CustomUser</span><span class="token punctuation">(</span>sysUser<span class="token punctuation">,</span> authorityList<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-3、自定义认证管理" tabindex="-1"><a class="header-anchor" href="#_4-3、自定义认证管理"><span>4.3、自定义认证管理</span></a></h3><p>首先，我们需要自定义登录接口LoginUserServiceImpl，然后让SpringSecurity对这个接口放行，让用户访问这个接口的时候不用登录也能访问。,怎么放行呢？去配置类里面放行。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">//@EnableWebSecurity是开启SpringSecurity的默认行为</span>
<span class="token annotation punctuation">@EnableWebSecurity</span>
<span class="token comment">//开启基于方法的安全认证机制，也就是说在web层的controller启用注解机制的安全确认</span>
<span class="token annotation punctuation">@EnableGlobalMethodSecurity</span><span class="token punctuation">(</span>prePostEnabled <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
<span class="token comment">//继承WebSecurityConfigurerAdapter</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SecurityConfig</span> <span class="token keyword">extends</span> <span class="token class-name">WebSecurityConfigurerAdapter</span><span class="token punctuation">{</span>
    <span class="token comment">//声明一个UserDetailsService对象</span>
    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">UserDetailsService</span> userDetailsService<span class="token punctuation">;</span>
    
    <span class="token doc-comment comment">/**
    自定义用户认证的管理
    */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span><span class="token class-name">AuthenticationManagerBuilder</span> auth<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">{</span>
        <span class="token comment">//注意必须构建一个密码的编码器</span>
        <span class="token class-name">BCryptPasswordEncoder</span> encoder <span class="token operator">=</span> <span class="token keyword">new</span>  <span class="token class-name">BCryptPasswordEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//设置认证方式为UserDetailsService的方式</span>
        auth<span class="token punctuation">.</span><span class="token function">userDetailsService</span><span class="token punctuation">(</span>userDetailsService<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">passwordEncoder</span><span class="token punctuation">(</span>encoder<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token annotation punctuation">@Override</span>
	<span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span><span class="token class-name">HttpSecurity</span> http<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        http
                <span class="token comment">//关闭csrf</span>
                <span class="token punctuation">.</span><span class="token function">csrf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">disable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token comment">//不通过Session获取SecurityContext</span>
                <span class="token punctuation">.</span><span class="token function">sessionManagement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sessionCreationPolicy</span><span class="token punctuation">(</span><span class="token class-name">SessionCreationPolicy</span><span class="token punctuation">.</span><span class="token constant">STATELESS</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">authorizeRequests</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token comment">// 对于登录接口 允许匿名访问</span>
                <span class="token punctuation">.</span><span class="token function">antMatchers</span><span class="token punctuation">(</span><span class="token string">&quot;/user/login&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">anonymous</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token comment">// 除上面外的所有请求全部需要鉴权认证</span>
                <span class="token punctuation">.</span><span class="token function">anyRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">authenticated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​ 在接口中我们通过AuthenticationManager的authenticate方法来进行用户认证,所以需要在SecurityConfig中配置把AuthenticationManager注入容器。怎么注入呢？回到配置类中固定这样写就ok！</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Bean</span>
<span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">AuthenticationManager</span> <span class="token function">authenticationManagerBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">authenticationManagerBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上就是简单配置，接下来就是去实现登录接口，生成token。Go!</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Service</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoginServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">LoginServcie</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">AuthenticationManager</span> authenticationManager<span class="token punctuation">;</span>
    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">RedisCache</span> redisCache<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">ResponseResult</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">UsernamePasswordAuthenticationToken</span> authenticationToken <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UsernamePasswordAuthenticationToken</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getUserName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>user<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Authentication</span> authenticate <span class="token operator">=</span> authenticationManager<span class="token punctuation">.</span><span class="token function">authenticate</span><span class="token punctuation">(</span>authenticationToken<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">isNull</span><span class="token punctuation">(</span>authenticate<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">&quot;用户名或密码错误&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">//使用userid生成token</span>
        <span class="token class-name">LoginUser</span> loginUser <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">LoginUser</span><span class="token punctuation">)</span> authenticate<span class="token punctuation">.</span><span class="token function">getPrincipal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> userId <span class="token operator">=</span> loginUser<span class="token punctuation">.</span><span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> jwt <span class="token operator">=</span> <span class="token class-name">JwtUtil</span><span class="token punctuation">.</span><span class="token function">createJWT</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//authenticate存入redis</span>
        redisCache<span class="token punctuation">.</span><span class="token function">setCacheObject</span><span class="token punctuation">(</span><span class="token string">&quot;login:&quot;</span><span class="token operator">+</span>userId<span class="token punctuation">,</span>loginUser<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//把token响应给前端</span>
        <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;token&quot;</span><span class="token punctuation">,</span>jwt<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ResponseResult</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token string">&quot;登陆成功&quot;</span><span class="token punctuation">,</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上就是生成token的过程，是不是很简单啊！</p><p>接下来我们要做的就是自定义认证过滤器</p><h3 id="_4-4、认证过滤器" tabindex="-1"><a class="header-anchor" href="#_4-4、认证过滤器"><span>4.4、认证过滤器</span></a></h3><p>首先，我们需要自定义一个过滤器类，然后继承OncePerRequestFilter。什么是认证过滤器呢？因为前面我们已经通过UserId生成了token，现在我们要做的就是从token里面解析出UserId，</p><p>使用userid去redis中获取对应的LoginUser对象。因为不能直接使用LoginUser对象存入SecurityContextHolder，</p><p>需要封装成UsernamePasswordAuthenticationToken对象，此对象实现了Authentication，最后将Authentication对象存入SecurityContextHolder</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JwtAuthenticationTokenFilter</span> <span class="token keyword">extends</span> <span class="token class-name">OncePerRequestFilter</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">RedisCache</span> redisCache<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doFilterInternal</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">FilterChain</span> filterChain<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token comment">//获取token</span>
        <span class="token class-name">String</span> token <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token string">&quot;token&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">hasText</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">//放行</span>
            filterChain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">//解析token</span>
        <span class="token class-name">String</span> userid<span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token class-name">Claims</span> claims <span class="token operator">=</span> <span class="token class-name">JwtUtil</span><span class="token punctuation">.</span><span class="token function">parseJWT</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>
            userid <span class="token operator">=</span> claims<span class="token punctuation">.</span><span class="token function">getSubject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">&quot;token非法&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">//从redis中获取用户信息</span>
        <span class="token class-name">String</span> redisKey <span class="token operator">=</span> <span class="token string">&quot;login:&quot;</span> <span class="token operator">+</span> userid<span class="token punctuation">;</span>
        <span class="token class-name">LoginUser</span> loginUser <span class="token operator">=</span> redisCache<span class="token punctuation">.</span><span class="token function">getCacheObject</span><span class="token punctuation">(</span>redisKey<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">isNull</span><span class="token punctuation">(</span>loginUser<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">&quot;用户未登录&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">//存入SecurityContextHolder</span>
        <span class="token comment">//TODO 获取权限信息封装到Authentication中</span>
        <span class="token class-name">UsernamePasswordAuthenticationToken</span> authenticationToken <span class="token operator">=</span>
                <span class="token keyword">new</span> <span class="token class-name">UsernamePasswordAuthenticationToken</span><span class="token punctuation">(</span>loginUser<span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">SecurityContextHolder</span><span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAuthentication</span><span class="token punctuation">(</span>authenticationToken<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//放行</span>
        filterChain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>你以为到这里就结束了吗？还有最后一步，还是回到配置类中，在configure中添加过滤器链</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span><span class="token class-name">HttpSecurity</span> http<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        http
                <span class="token comment">//关闭csrf</span>
                <span class="token punctuation">.</span><span class="token function">csrf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">disable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token comment">//不通过Session获取SecurityContext</span>
                <span class="token punctuation">.</span><span class="token function">sessionManagement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sessionCreationPolicy</span><span class="token punctuation">(</span><span class="token class-name">SessionCreationPolicy</span><span class="token punctuation">.</span><span class="token constant">STATELESS</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">authorizeRequests</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token comment">// 对于登录接口 允许匿名访问</span>
                <span class="token punctuation">.</span><span class="token function">antMatchers</span><span class="token punctuation">(</span><span class="token string">&quot;/user/login&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">anonymous</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token comment">// 除上面外的所有请求全部需要鉴权认证</span>
                <span class="token punctuation">.</span><span class="token function">anyRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">authenticated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//把token校验过滤器添加到过滤器链中</span>
        http<span class="token punctuation">.</span><span class="token function">addFilterBefore</span><span class="token punctuation">(</span>jwtAuthenticationTokenFilter<span class="token punctuation">,</span> <span class="token class-name">UsernamePasswordAuthenticationFilter</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-5、退出登录" tabindex="-1"><a class="header-anchor" href="#_4-5、退出登录"><span>4.5、退出登录</span></a></h3><p>我们只需要定义一个退出方法，然后获取SecurityContextHolder中的认证信息，删除redis中对应的数据即可。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>
<span class="token annotation punctuation">@Service</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoginServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">LoginServcie</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">AuthenticationManager</span> authenticationManager<span class="token punctuation">;</span>
    
    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">RedisCache</span> redisCache<span class="token punctuation">;</span>
    
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">ResponseResult</span> <span class="token function">logout</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Authentication</span> authentication <span class="token operator">=</span> <span class="token class-name">SecurityContextHolder</span><span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAuthentication</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">LoginUser</span> loginUser <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">LoginUser</span><span class="token punctuation">)</span> authentication<span class="token punctuation">.</span><span class="token function">getPrincipal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Long</span> userid <span class="token operator">=</span> loginUser<span class="token punctuation">.</span><span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        redisCache<span class="token punctuation">.</span><span class="token function">deleteObject</span><span class="token punctuation">(</span><span class="token string">&quot;login:&quot;</span><span class="token operator">+</span>userid<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ResponseResult</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token string">&quot;退出成功&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上就是我们的全部认证过程，继续往下我们的授权过程吧！</p><h3 id="_4-6、自定义授权管理" tabindex="-1"><a class="header-anchor" href="#_4-6、自定义授权管理"><span>4.6、自定义授权管理</span></a></h3><h4 id="_4-6-1-授权基本流程" tabindex="-1"><a class="header-anchor" href="#_4-6-1-授权基本流程"><span>4.6.1 授权基本流程</span></a></h4><p>​ 在SpringSecurity中，会使用默认的FilterSecurityInterceptor来进行权限校验。在FilterSecurityInterceptor中会从SecurityContextHolder获取其中的Authentication，然后获取其中的权限信息。当前用户是否拥有访问当前资源所需的权限。</p><p>​ 所以我们在项目中只需要把当前登录用户的权限信息也存入Authentication。</p><p>​ 然后设置我们的资源所需要的权限即可。</p><h4 id="_4-6-2-授权实现" tabindex="-1"><a class="header-anchor" href="#_4-6-2-授权实现"><span>4.6.2 授权实现</span></a></h4><h5 id="_4-6-2-1-限制访问资源所需权限" tabindex="-1"><a class="header-anchor" href="#_4-6-2-1-限制访问资源所需权限"><span>4.6.2.1 限制访问资源所需权限</span></a></h5><p>​ SpringSecurity为我们提供了基于注解的权限控制方案，这也是我们项目中主要采用的方式。我们可以使用注解去指定访问对应的资源所需的权限。</p><p>​ 但是要使用它我们需要先开启相关配置。在配置类头上加注解即可</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@EnableGlobalMethodSecurity</span><span class="token punctuation">(</span>prePostEnabled <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后就可以使用对应的注解。@PreAuthorize</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@RestController</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloController</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/hello&quot;</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@PreAuthorize</span><span class="token punctuation">(</span><span class="token string">&quot;hasAuthority(&#39;test&#39;)&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-6-3-封装权限信息" tabindex="-1"><a class="header-anchor" href="#_4-6-3-封装权限信息"><span>4.6.3 封装权限信息</span></a></h4><p>​ 我们前面在写UserDetailsServiceImpl的时候说过，需要从数据库中查询出用户对应的权限信息封装成SimpleGrantedAuthority对象，最后封装到UserDetails中返回。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Service</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserDetailsServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserDetailsService</span><span class="token punctuation">{</span>
    
    <span class="token comment">//权限认证层依赖于用户模块的业务层</span>
    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">CustomerService</span> customerService<span class="token punctuation">;</span>
    
    <span class="token comment">//会被自动回调，会将登录表单中用户的名称传递给该方法</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">UserDetails</span> <span class="token function">loadUserByUsername</span><span class="token punctuation">(</span><span class="token class-name">String</span> username<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">UsernameNotFoundException</span><span class="token punctuation">{</span>
        <span class="token comment">//通过业务层调用，查询用户信息</span>
        <span class="token class-name">Customer</span> customer <span class="token operator">=</span> customerService<span class="token punctuation">.</span><span class="token function">getCustomer</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//通过业务层调用，获取指定用户的权限信息</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Authority</span><span class="token punctuation">&gt;</span></span> authorityes <span class="token operator">=</span> customerService<span class="token punctuation">.</span><span class="token function">getCustomerAuthority</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//我们自己获取到的authorityes权限信息不能直接使用，需要封装成Spring官方指定的SimpleGrantedAuthority类，我们通过stream流实现authorityes封装，源码分析如下</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SimpleGrantedAuthority</span><span class="token punctuation">&gt;</span></span> authorityList <span class="token operator">=</span> authorityes<span class="token punctuation">.</span>stream<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>authority <span class="token operator">-&gt;</span> <span class="token keyword">new</span> <span class="token class-name">SimpleGrantedAuthority</span><span class="token punctuation">(</span>authority<span class="token punctuation">.</span><span class="token function">getAuthority</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//UserDetails对象表示封装了：当前的用户以及当前用户的权限信息，返回给安全框架。</span>
        <span class="token comment">//所以我们还需进一步将我们自定义的用户对象以及权限信息封装成Spring官方提供的User类型,user()源码分析如下：</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>customer <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token class-name">UserDetails</span> userDetails <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span>customer<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>customer<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>authorityList<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> userDetails<span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UsernameNotFoundException</span><span class="token punctuation">(</span><span class="token string">&quot;此用户不存在&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来一步就是将权限信息存到SecurityContextHolder中，所以接下来补充JwtAuthenticationTokenFilter代码</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JwtAuthenticationTokenFilter</span> <span class="token keyword">extends</span> <span class="token class-name">OncePerRequestFilter</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">RedisCache</span> redisCache<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doFilterInternal</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">FilterChain</span> filterChain<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token comment">//获取token</span>
        <span class="token class-name">String</span> token <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token string">&quot;token&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">hasText</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">//放行</span>
            filterChain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">//解析token</span>
        <span class="token class-name">String</span> userid<span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token class-name">Claims</span> claims <span class="token operator">=</span> <span class="token class-name">JwtUtil</span><span class="token punctuation">.</span><span class="token function">parseJWT</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>
            userid <span class="token operator">=</span> claims<span class="token punctuation">.</span><span class="token function">getSubject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">&quot;token非法&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">//从redis中获取用户信息</span>
        <span class="token class-name">String</span> redisKey <span class="token operator">=</span> <span class="token string">&quot;login:&quot;</span> <span class="token operator">+</span> userid<span class="token punctuation">;</span>
        <span class="token class-name">LoginUser</span> loginUser <span class="token operator">=</span> redisCache<span class="token punctuation">.</span><span class="token function">getCacheObject</span><span class="token punctuation">(</span>redisKey<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">isNull</span><span class="token punctuation">(</span>loginUser<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">&quot;用户未登录&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">//存入SecurityContextHolder</span>
        <span class="token comment">//TODO 获取权限信息封装到Authentication中</span>
        <span class="token class-name">UsernamePasswordAuthenticationToken</span> authenticationToken <span class="token operator">=</span>
                <span class="token keyword">new</span> <span class="token class-name">UsernamePasswordAuthenticationToken</span><span class="token punctuation">(</span>loginUser<span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">,</span>loginUser<span class="token punctuation">.</span><span class="token function">getAuthorities</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">SecurityContextHolder</span><span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAuthentication</span><span class="token punctuation">(</span>authenticationToken<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//放行</span>
        filterChain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>具体的认证和授权流程我们就到此结束，接下来就是数据库的设计以及我们controller层中的代码编写。数据库中涉及用户、角色、菜单。菜单中有访问权限信息，将用户和角色绑定、将菜单和角色绑定就可以实现权限系统啦！</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结：</span></a></h2><h3 id="_1、用户详情服务认证" tabindex="-1"><a class="header-anchor" href="#_1、用户详情服务认证"><span>1、用户详情服务认证：</span></a></h3><p>第一步：自己定义一个类去继承WebSecurityConfigurerAdapter。</p><p>第二步：去重写protected void configure(AuthenticationManagerBuilder auth) throws Exception方法</p><p>第三步：定义一个实现类去实现UserDetailsService</p><p>​ 注意：查询到的权限信息不能直接使用，需封装成SimpleGrantedAuthority对象；最后返回的类型为UserDetails类，所以需要将最后的实体类封装成User()对象，因为User()实现了UserDetails，即返回的就是UserDetails对象。</p><p>最后一步：回到配置类中，使用UserDetailsService.</p><h3 id="_2、用户授权管理" tabindex="-1"><a class="header-anchor" href="#_2、用户授权管理"><span>2、用户授权管理</span></a></h3><p>直接重写protected void configure(HttpSecurity http) throws Exception，详细代码见上。</p>`,130);function y(S,w){const a=o("ExternalLinkIcon");return c(),i("div",null,[u,n("p",null,[s("要对Web资源进行保护，最好的办法莫过于Filter 要想对方法调用进行保护，最好的办法莫过于"),n("a",r,[s("AOP"),t(a)]),s("。")]),k,d,v,n("figure",null,[n("a",m,[b,t(a)]),h]),g])}const _=p(l,[["render",y],["__file","SpringSecurity快速入门.html.vue"]]),x=JSON.parse('{"path":"/posts/%E5%90%8E%E7%AB%AF/Spring%E7%B3%BB%E5%88%97/SpringSecurity%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8.html","title":"SpringSecurity","lang":"zh-CN","frontmatter":{"icon":"pen-to-square","date":"2022-01-12T00:00:00.000Z","category":["后端"],"tag":["SpringSecurity"],"star":true,"sticky":true,"description":"SpringSecurity 介绍 1、简介 Spring 是非常流行和成功的 Java 应用开发框架，Spring Security 正是 Spring 家族中的成员。Spring Security 基于 Spring 框架，提供了一套 Web 应用安全性的完整解决方案。 正如你可能知道的关于安全方面的两个核心功能是“认证”和“授权”，一般来说，We...","head":[["meta",{"property":"og:url","content":"https://swx08.github.io/vuepress/posts/%E5%90%8E%E7%AB%AF/Spring%E7%B3%BB%E5%88%97/SpringSecurity%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8.html"}],["meta",{"property":"og:site_name","content":"文学博客"}],["meta",{"property":"og:title","content":"SpringSecurity"}],["meta",{"property":"og:description","content":"SpringSecurity 介绍 1、简介 Spring 是非常流行和成功的 Java 应用开发框架，Spring Security 正是 Spring 家族中的成员。Spring Security 基于 Spring 框架，提供了一套 Web 应用安全性的完整解决方案。 正如你可能知道的关于安全方面的两个核心功能是“认证”和“授权”，一般来说，We..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"http://rsslo5plk.hn-bkt.clouddn.com/20201231155747261.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:alt","content":"SpringSecurity"}],["meta",{"property":"article:author","content":"sixkey"}],["meta",{"property":"article:tag","content":"SpringSecurity"}],["meta",{"property":"article:published_time","content":"2022-01-12T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"SpringSecurity\\",\\"image\\":[\\"http://rsslo5plk.hn-bkt.clouddn.com/20201231155747261.png\\",\\"https://s1.ax1x.com/2023/04/08/ppHKlm8.md.png\\"],\\"datePublished\\":\\"2022-01-12T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"sixkey\\",\\"url\\":\\"https://swx08.github.io\\"}]}"]]},"headers":[{"level":2,"title":"介绍","slug":"介绍","link":"#介绍","children":[{"level":3,"title":"1、简介","slug":"_1、简介","link":"#_1、简介","children":[]},{"level":3,"title":"2、同款产品对比","slug":"_2、同款产品对比","link":"#_2、同款产品对比","children":[{"level":4,"title":"3.1、Spring Security","slug":"_3-1、spring-security","link":"#_3-1、spring-security","children":[]},{"level":4,"title":"3.2、 Shiro","slug":"_3-2、-shiro","link":"#_3-2、-shiro","children":[]}]}]},{"level":2,"title":"一、学习目标:","slug":"一、学习目标","link":"#一、学习目标","children":[{"level":3,"title":"1.1、简单了解","slug":"_1-1、简单了解","link":"#_1-1、简单了解","children":[]}]},{"level":2,"title":"二、快速入门","slug":"二、快速入门","link":"#二、快速入门","children":[{"level":3,"title":"2.1、主要概念：","slug":"_2-1、主要概念","link":"#_2-1、主要概念","children":[]},{"level":3,"title":"2.2、基础配置","slug":"_2-2、基础配置","link":"#_2-2、基础配置","children":[]},{"level":3,"title":"2.3、搭建安全管理测试环境","slug":"_2-3、搭建安全管理测试环境","link":"#_2-3、搭建安全管理测试环境","children":[]},{"level":3,"title":"2.4、MVC  Security安全配置介绍","slug":"_2-4、mvc-security安全配置介绍","link":"#_2-4、mvc-security安全配置介绍","children":[]}]},{"level":2,"title":"三、认证及授权","slug":"三、认证及授权","link":"#三、认证及授权","children":[{"level":3,"title":"3.1、认证管理","slug":"_3-1、认证管理","link":"#_3-1、认证管理","children":[{"level":4,"title":"1、前期准备","slug":"_1、前期准备","link":"#_1、前期准备","children":[]},{"level":4,"title":"2、UserDetailsService身份认证使用","slug":"_2、userdetailsservice身份认证使用","link":"#_2、userdetailsservice身份认证使用","children":[]}]},{"level":3,"title":"3.2、授权管理","slug":"_3-2、授权管理","link":"#_3-2、授权管理","children":[{"level":4,"title":"3.2.1、授权分析","slug":"_3-2-1、授权分析","link":"#_3-2-1、授权分析","children":[]}]},{"level":3,"title":"3.3、自定义登录页面控制","slug":"_3-3、自定义登录页面控制","link":"#_3-3、自定义登录页面控制","children":[{"level":4,"title":"1、配置","slug":"_1、配置","link":"#_1、配置","children":[]},{"level":4,"title":"2、注意：","slug":"_2、注意","link":"#_2、注意","children":[]}]},{"level":3,"title":"3.4、自定义退出登录","slug":"_3-4、自定义退出登录","link":"#_3-4、自定义退出登录","children":[{"level":4,"title":"配置","slug":"配置","link":"#配置","children":[]}]}]},{"level":2,"title":"四、结合JWT+Redis","slug":"四、结合jwt-redis","link":"#四、结合jwt-redis","children":[{"level":3,"title":"4.1、思路分析","slug":"_4-1、思路分析","link":"#_4-1、思路分析","children":[]},{"level":3,"title":"4.2、引入","slug":"_4-2、引入","link":"#_4-2、引入","children":[]},{"level":3,"title":"4.3、自定义认证管理","slug":"_4-3、自定义认证管理","link":"#_4-3、自定义认证管理","children":[]},{"level":3,"title":"4.4、认证过滤器","slug":"_4-4、认证过滤器","link":"#_4-4、认证过滤器","children":[]},{"level":3,"title":"4.5、退出登录","slug":"_4-5、退出登录","link":"#_4-5、退出登录","children":[]},{"level":3,"title":"4.6、自定义授权管理","slug":"_4-6、自定义授权管理","link":"#_4-6、自定义授权管理","children":[{"level":4,"title":"4.6.1 授权基本流程","slug":"_4-6-1-授权基本流程","link":"#_4-6-1-授权基本流程","children":[]},{"level":4,"title":"4.6.2 授权实现","slug":"_4-6-2-授权实现","link":"#_4-6-2-授权实现","children":[{"level":5,"title":"4.6.2.1 限制访问资源所需权限","slug":"_4-6-2-1-限制访问资源所需权限","link":"#_4-6-2-1-限制访问资源所需权限","children":[]}]},{"level":4,"title":"4.6.3 封装权限信息","slug":"_4-6-3-封装权限信息","link":"#_4-6-3-封装权限信息","children":[]}]}]},{"level":2,"title":"总结：","slug":"总结","link":"#总结","children":[{"level":3,"title":"1、用户详情服务认证：","slug":"_1、用户详情服务认证","link":"#_1、用户详情服务认证","children":[]},{"level":3,"title":"2、用户授权管理","slug":"_2、用户授权管理","link":"#_2、用户授权管理","children":[]}]}],"git":{},"readingTime":{"minutes":18.71,"words":5614},"filePathRelative":"posts/后端/Spring系列/SpringSecurity快速入门.md","localizedDate":"2022年1月12日","excerpt":"\\n<h2>介绍</h2>\\n<h3>1、简介</h3>\\n<p>Spring 是非常流行和成功的 Java 应用开发框架，Spring Security 正是 Spring 家族中的成员。Spring Security 基于 Spring 框架，提供了一套 Web 应用安全性的完整解决方案。</p>\\n<p>正如你可能知道的关于安全方面的两个核心功能是“<strong>认证</strong>”和“<strong>授权</strong>”，一般来说，Web 应用的安全性包括**用户认证（Authentication）和用户授权（Authorization）**两个部分，这两点也是 SpringSecurity 重要核心功能。</p>","autoDesc":true}');export{_ as comp,x as data};
