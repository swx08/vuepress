import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as a,c as s,a as t}from"./app-DCsLG_oX.js";const e={},p=t(`<h1 id="threadlocal" tabindex="-1"><a class="header-anchor" href="#threadlocal"><span>ThreadLocal</span></a></h1><h2 id="_1、使用前景" tabindex="-1"><a class="header-anchor" href="#_1、使用前景"><span>1、使用前景</span></a></h2><p>因为自动填充公共字段时需要获取当前登录用户的Id,所以引入了ThreadLocal。</p><p>在学习ThreadLocal之前，我们需要确认一个事情，就是客户端发送的每次http请求,对应的在服务端都会分配一个新的线程来处理，要确保以下所执行到的方法都是同一个线程：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token number">1</span>）<span class="token class-name">LoginCheckFilter</span>的doFilter方法
<span class="token number">2</span>）<span class="token class-name">EmployeeController</span>的update方法
<span class="token number">3</span>）<span class="token class-name">MyMetaObjectHandler</span>的updateFill方法
可以使用以下代码查看当前线程<span class="token class-name">Id</span>
<span class="token keyword">long</span> id <span class="token operator">=</span> <span class="token class-name">ThreadLocal</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-什么是threadlocal" tabindex="-1"><a class="header-anchor" href="#_2-什么是threadlocal"><span>2 什么是ThreadLocal？</span></a></h2><p>由JDK所提供。ThreadLocal并不是一个Thread,而是Thread的局部变量，当使用ThreadLocal维护变量时，ThreadLocal为每个使用该变量的线程提供独立的变量副本，所以每一个线程都可以独立地改变自己的副本，而不会影响其它线程所对应的副本。</p><p>ThreadLocal为每一个线程提供单独的一份存储空间，具有线程隔离的效果，只有在线程内才能获取到对应的值，线程外则不能访问。</p><p>ThreadLocal常用方法：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">T</span> value<span class="token punctuation">)</span> 设置当前线程的线程局部变量的值
<span class="token keyword">public</span> <span class="token class-name">T</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span>           返回当前线程所对应的线程局部变量的值
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>具体使用:</p><p>我们可以在LoginCheckFilter的doFilter方法中获取当前登录的用户Id，并调用ThreadLocal的set方法设置当前线程的线程局部变量的值 ( 用户Id ) ,然后在MyMetaObjectHandler的updateFill方法中调用ThreadLocal的get方法来获取当前的线程所对应的线程局部变量的值 ( 用户Id )。</p><p>代码实现：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 基于ThreadLocal封装工具类，用来保存和获取当前登录的用户Id
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BaseContext</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">ThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> threadLocal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">setCurrentId</span><span class="token punctuation">(</span><span class="token class-name">Long</span> id<span class="token punctuation">)</span><span class="token punctuation">{</span>
        threadLocal<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Long</span> <span class="token function">getCurrentId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> threadLocal<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在过滤器方法里面一旦用户登录就设置用户Id</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">//4.查看登录状态，如果已登录则放行</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;employee&quot;</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;用户已登录,id为:&quot;</span><span class="token operator">+</span>request<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;employee&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">Long</span> empId <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Long</span><span class="token punctuation">)</span> request<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;employee&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">//同一个线程保存用户Id</span>
            <span class="token class-name">BaseContext</span><span class="token punctuation">.</span><span class="token function">setCurrentId</span><span class="token punctuation">(</span>empId<span class="token punctuation">)</span><span class="token punctuation">;</span>
            filterChain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,16),o=[p];function c(l,i){return a(),s("div",null,o)}const d=n(e,[["render",c],["__file","ThreadLocal使用.html.vue"]]),k=JSON.parse('{"path":"/posts/%E5%90%8E%E7%AB%AF/%E5%AE%9E%E6%88%98/ThreadLocal%E4%BD%BF%E7%94%A8.html","title":"ThreadLocal","lang":"zh-CN","frontmatter":{"tag":["ThreadLocal","实战"],"category":["后端"],"date":"2022-01-12T00:00:00.000Z","star":true,"sticky":true,"description":"ThreadLocal 1、使用前景 因为自动填充公共字段时需要获取当前登录用户的Id,所以引入了ThreadLocal。 在学习ThreadLocal之前，我们需要确认一个事情，就是客户端发送的每次http请求,对应的在服务端都会分配一个新的线程来处理，要确保以下所执行到的方法都是同一个线程： 2 什么是ThreadLocal？ 由JDK所提供。Th...","head":[["meta",{"property":"og:url","content":"https://swx08.github.io/vuepress/posts/%E5%90%8E%E7%AB%AF/%E5%AE%9E%E6%88%98/ThreadLocal%E4%BD%BF%E7%94%A8.html"}],["meta",{"property":"og:site_name","content":"文学博客"}],["meta",{"property":"og:title","content":"ThreadLocal"}],["meta",{"property":"og:description","content":"ThreadLocal 1、使用前景 因为自动填充公共字段时需要获取当前登录用户的Id,所以引入了ThreadLocal。 在学习ThreadLocal之前，我们需要确认一个事情，就是客户端发送的每次http请求,对应的在服务端都会分配一个新的线程来处理，要确保以下所执行到的方法都是同一个线程： 2 什么是ThreadLocal？ 由JDK所提供。Th..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"sixkey"}],["meta",{"property":"article:tag","content":"ThreadLocal"}],["meta",{"property":"article:tag","content":"实战"}],["meta",{"property":"article:published_time","content":"2022-01-12T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"ThreadLocal\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-01-12T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"sixkey\\",\\"url\\":\\"https://swx08.github.io\\"}]}"]]},"headers":[{"level":2,"title":"1、使用前景","slug":"_1、使用前景","link":"#_1、使用前景","children":[]},{"level":2,"title":"2 什么是ThreadLocal？","slug":"_2-什么是threadlocal","link":"#_2-什么是threadlocal","children":[]}],"git":{},"readingTime":{"minutes":1.88,"words":565},"filePathRelative":"posts/后端/实战/ThreadLocal使用.md","localizedDate":"2022年1月12日","excerpt":"\\n<h2>1、使用前景</h2>\\n<p>因为自动填充公共字段时需要获取当前登录用户的Id,所以引入了ThreadLocal。</p>\\n<p>在学习ThreadLocal之前，我们需要确认一个事情，就是客户端发送的每次http请求,对应的在服务端都会分配一个新的线程来处理，要确保以下所执行到的方法都是同一个线程：</p>\\n<div class=\\"language-java\\" data-ext=\\"java\\" data-title=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token number\\">1</span>）<span class=\\"token class-name\\">LoginCheckFilter</span>的doFilter方法\\n<span class=\\"token number\\">2</span>）<span class=\\"token class-name\\">EmployeeController</span>的update方法\\n<span class=\\"token number\\">3</span>）<span class=\\"token class-name\\">MyMetaObjectHandler</span>的updateFill方法\\n可以使用以下代码查看当前线程<span class=\\"token class-name\\">Id</span>\\n<span class=\\"token keyword\\">long</span> id <span class=\\"token operator\\">=</span> <span class=\\"token class-name\\">ThreadLocal</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">currentThread</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getId</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n</code></pre></div>","autoDesc":true}');export{d as comp,k as data};
