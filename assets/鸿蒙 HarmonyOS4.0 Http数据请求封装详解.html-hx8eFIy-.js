import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,a as t}from"./app-DCsLG_oX.js";const p={},e=t(`<h1 id="harmonyos-http-请求封装" tabindex="-1"><a class="header-anchor" href="#harmonyos-http-请求封装"><span>HarmonyOS http 请求封装</span></a></h1><h3 id="步骤" tabindex="-1"><a class="header-anchor" href="#步骤"><span><strong>步骤</strong></span></a></h3><blockquote><p><strong>1、定义响应数据格式</strong></p><p><strong>2、封装数据请求</strong></p><p><strong>3、将各种请求进行模块划分</strong></p><p><strong>4、请求示例</strong></p></blockquote><p><strong>项目目录</strong></p><figure><img src="https://pic.imgdb.cn/item/6568ba96c458853aefa2e148.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_1、定义响应数据格式" tabindex="-1"><a class="header-anchor" href="#_1、定义响应数据格式"><span><strong>1、定义响应数据格式</strong></span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span>  <span class="token class-name">Response</span> <span class="token punctuation">{</span>
  <span class="token doc-comment comment">/**
   * 响应码
   */</span>
  <span class="token literal-property property">code</span><span class="token operator">:</span>number
  <span class="token doc-comment comment">/**
   * 响应消息
   */</span>
  <span class="token literal-property property">message</span><span class="token operator">:</span>string
  <span class="token doc-comment comment">/**
   * 响应数据
   */</span>
  <span class="token literal-property property">data</span><span class="token operator">:</span>any
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2、封装数据请求" tabindex="-1"><a class="header-anchor" href="#_2、封装数据请求"><span><strong>2、封装数据请求</strong></span></a></h3><p><strong>提示：具体更详细的配置请参考官网</strong></p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">import</span> http <span class="token keyword">from</span> <span class="token string">&#39;@ohos.net.http&#39;</span><span class="token punctuation">;</span>
<span class="token comment">//导入预定好的数据响应格式</span>
<span class="token keyword">import</span> Response <span class="token keyword">from</span> <span class="token string">&#39;../utils/Response&#39;</span>

<span class="token comment">//导出去一个请求函数，这样开发者就可以像axios一样的风格请求数据</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">url</span><span class="token operator">:</span>string<span class="token punctuation">,</span><span class="token literal-property property">method</span><span class="token operator">:</span> http<span class="token punctuation">.</span>RequestMethod<span class="token punctuation">,</span>data<span class="token operator">?</span><span class="token operator">:</span>any</span><span class="token punctuation">)</span><span class="token operator">:</span> Promise<span class="token operator">&lt;</span>Response<span class="token operator">&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">//定义一个后台请求的基地址</span>
  <span class="token keyword">const</span> <span class="token constant">BASE_URL</span> <span class="token operator">=</span>  <span class="token string">&quot;http://localhost:9600&quot;</span>
  <span class="token keyword">let</span> httpRequest <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createHttp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> responseResult <span class="token operator">=</span> httpRequest<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span> <span class="token constant">BASE_URL</span><span class="token operator">+</span> url<span class="token punctuation">,</span><span class="token punctuation">{</span>
    <span class="token literal-property property">method</span><span class="token operator">:</span> method<span class="token punctuation">,</span>
    <span class="token comment">// header: {</span>
    <span class="token comment">//   &#39;Content-Type&#39;: &#39;application/json&#39;</span>
    <span class="token comment">// },</span>
    <span class="token comment">//携带额外参数</span>
    <span class="token literal-property property">extraData</span><span class="token operator">:</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token comment">// 可选，指定返回数据的类型</span>
    <span class="token comment">// expectDataType: http.HttpDataType.STRING,</span>
    <span class="token comment">// 可选，默认为true</span>
    <span class="token comment">// usingCache: true,</span>
    <span class="token comment">// 可选，默认为1</span>
    <span class="token comment">// priority: 1,</span>
    <span class="token comment">// 可选，默认为60000ms</span>
    <span class="token comment">// connectTimeout: 60000,</span>
    <span class="token comment">// readTimeout: 60000,</span>
    <span class="token comment">// 可选，协议类型默认值由系统自动指定</span>
    <span class="token comment">// usingProtocol: http.HttpProtocol.HTTP1_1,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">let</span> response <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Response</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 处理数据，并返回</span>
  <span class="token keyword">return</span> responseResult<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">value</span><span class="token operator">:</span> http<span class="token punctuation">.</span>HttpResponse</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>value<span class="token punctuation">.</span>responseCode <span class="token operator">===</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 获取返回数据,将返回的json数据解析成事先预定好的响应格式</span>
      <span class="token comment">// 这里建议和后端的保持一致</span>
      <span class="token keyword">let</span> <span class="token literal-property property">res</span><span class="token operator">:</span> Response <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>value<span class="token punctuation">.</span>result<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      response<span class="token punctuation">.</span>data <span class="token operator">=</span> res<span class="token punctuation">.</span>data<span class="token punctuation">;</span>
      response<span class="token punctuation">.</span>code <span class="token operator">=</span> res<span class="token punctuation">.</span>code<span class="token punctuation">;</span>
      response<span class="token punctuation">.</span>message <span class="token operator">=</span> res<span class="token punctuation">.</span>message<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      response<span class="token punctuation">.</span>message <span class="token operator">=</span> <span class="token string">&#39;请求错误&#39;</span><span class="token punctuation">;</span>
      response<span class="token punctuation">.</span>code <span class="token operator">=</span> <span class="token number">400</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> response<span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    response<span class="token punctuation">.</span>message <span class="token operator">=</span> <span class="token string">&#39;请求错误&#39;</span><span class="token punctuation">;</span>
    response<span class="token punctuation">.</span>code <span class="token operator">=</span> <span class="token number">400</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> response<span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3、将各种请求进行模块划分" tabindex="-1"><a class="header-anchor" href="#_3、将各种请求进行模块划分"><span><strong>3、将各种请求进行模块划分</strong></span></a></h3><p><strong>熟悉vue开发的同学都知道我们不同模块的请求一般放在api目录下进行划分</strong></p><p>如下以请求用户User模块为示例</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">import</span> http <span class="token keyword">from</span> <span class="token string">&#39;@ohos.net.http&#39;</span><span class="token punctuation">;</span>
<span class="token comment">//导入封装好的请求</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> request <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;../utils/request&#39;</span>

<span class="token doc-comment comment">/**
 * 根据用户id请求用户数据
 * <span class="token keyword">@param</span> <span class="token parameter">userId</span>
 * <span class="token keyword">@returns</span>
 */</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">getUserById</span><span class="token punctuation">(</span><span class="token parameter">userId</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">/user/get/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>userId<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>http<span class="token punctuation">.</span>RequestMethod<span class="token punctuation">.</span><span class="token constant">GET</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/**
 * 请求用户数据
 * <span class="token keyword">@param</span> <span class="token parameter">userId</span>
 * <span class="token keyword">@returns</span>
 */</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token string">&#39;/user/get&#39;</span><span class="token punctuation">,</span>http<span class="token punctuation">.</span>RequestMethod<span class="token punctuation">.</span><span class="token constant">GET</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/**
 * 用户数据保存
 * <span class="token keyword">@param</span> <span class="token parameter">userId</span>
 * <span class="token keyword">@returns</span>
 */</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">/user/save</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>http<span class="token punctuation">.</span>RequestMethod<span class="token punctuation">.</span><span class="token constant">POST</span><span class="token punctuation">,</span>data<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4、附上一个请求示例" tabindex="-1"><a class="header-anchor" href="#_4、附上一个请求示例"><span><strong>4、附上一个请求示例</strong></span></a></h3><p><strong>这里提前一个用户对象用于接收数据时使用</strong></p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">username</span><span class="token operator">:</span>string
  <span class="token literal-property property">password</span><span class="token operator">:</span>string
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">//导入api下的User模块：请求方法</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span>getUser<span class="token punctuation">,</span>save<span class="token punctuation">,</span>getUserById<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;../api/user&#39;</span>
<span class="token comment">//导入定义好的用户对象</span>
<span class="token keyword">import</span> User <span class="token keyword">from</span> <span class="token string">&#39;../model/User&#39;</span>

@Entry
@Component
struct Index <span class="token punctuation">{</span>
  @State user<span class="token operator">:</span>User <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">username</span><span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">password</span><span class="token operator">:</span> <span class="token string">&#39;&#39;</span>
  <span class="token punctuation">}</span>

    <span class="token comment">//组件展示前进行数据的一个请求</span>
  <span class="token function">aboutToAppear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//根据用户id进行的一个请求</span>
    <span class="token function">getUserById</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>code <span class="token operator">===</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>user <span class="token operator">=</span> res<span class="token punctuation">.</span>data
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token comment">//不携带参数的一个请求</span>
    <span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>code <span class="token operator">===</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>user <span class="token operator">=</span> res<span class="token punctuation">.</span>data
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">Row</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">Column</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">Text</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>user<span class="token punctuation">.</span>username<span class="token punctuation">)</span>
          <span class="token punctuation">.</span><span class="token function">fontSize</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span>
          <span class="token punctuation">.</span><span class="token function">fontWeight</span><span class="token punctuation">(</span>FontWeight<span class="token punctuation">.</span>Bold<span class="token punctuation">)</span>
        <span class="token function">Text</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>user<span class="token punctuation">.</span>password<span class="token punctuation">)</span>
          <span class="token punctuation">.</span><span class="token function">fontSize</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span>
          <span class="token punctuation">.</span><span class="token function">fontWeight</span><span class="token punctuation">(</span>FontWeight<span class="token punctuation">.</span>Bold<span class="token punctuation">)</span>

        <span class="token function">Divider</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token function">TextInput</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">margin</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">top</span><span class="token operator">:</span> <span class="token number">20</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
          <span class="token punctuation">.</span><span class="token function">onChange</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">value</span><span class="token operator">:</span> string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>user<span class="token punctuation">.</span>username <span class="token operator">=</span> value
          <span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token function">TextInput</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span>InputType<span class="token punctuation">.</span>Password<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">margin</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">top</span><span class="token operator">:</span> <span class="token number">20</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
          <span class="token punctuation">.</span><span class="token function">onChange</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">value</span><span class="token operator">:</span> string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>user<span class="token punctuation">.</span>password <span class="token operator">=</span> value
          <span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token function">Button</span><span class="token punctuation">(</span><span class="token string">&#39;登录&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">width</span><span class="token punctuation">(</span><span class="token number">150</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">margin</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">top</span><span class="token operator">:</span> <span class="token number">20</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
          <span class="token punctuation">.</span><span class="token function">onClick</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;发送成功&quot;</span><span class="token punctuation">)</span>
            <span class="token comment">//保存用户数据的一个请求</span>
            <span class="token function">save</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>user<span class="token punctuation">)</span>
          <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
      <span class="token punctuation">.</span><span class="token function">width</span><span class="token punctuation">(</span><span class="token string">&#39;100%&#39;</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">height</span><span class="token punctuation">(</span><span class="token string">&#39;100%&#39;</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">top</span><span class="token operator">:</span> <span class="token number">50</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token punctuation">.</span><span class="token function">height</span><span class="token punctuation">(</span><span class="token string">&#39;100%&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">width</span><span class="token punctuation">(</span><span class="token string">&#39;100%&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">alignItems</span><span class="token punctuation">(</span>VerticalAlign<span class="token punctuation">.</span>Top<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,18),o=[e];function c(i,l){return s(),a("div",null,o)}const k=n(p,[["render",c],["__file","鸿蒙 HarmonyOS4.0 Http数据请求封装详解.html.vue"]]),d=JSON.parse('{"path":"/posts/HarmonyOS/%E9%B8%BF%E8%92%99%20HarmonyOS4.0%20Http%E6%95%B0%E6%8D%AE%E8%AF%B7%E6%B1%82%E5%B0%81%E8%A3%85%E8%AF%A6%E8%A7%A3.html","title":"HarmonyOS http 请求封装","lang":"zh-CN","frontmatter":{"icon":"pen-to-square","date":"2022-01-12T00:00:00.000Z","category":["操作系统","HarmonyOS"],"tag":["HarmonyOS"],"star":true,"sticky":true,"description":"HarmonyOS http 请求封装 步骤 1、定义响应数据格式 2、封装数据请求 3、将各种请求进行模块划分 4、请求示例 项目目录 1、定义响应数据格式 2、封装数据请求 提示：具体更详细的配置请参考官网 3、将各种请求进行模块划分 熟悉vue开发的同学都知道我们不同模块的请求一般放在api目录下进行划分 如下以请求用户User模块为示例 4、附...","head":[["meta",{"property":"og:url","content":"https://swx08.github.io/vuepress/posts/HarmonyOS/%E9%B8%BF%E8%92%99%20HarmonyOS4.0%20Http%E6%95%B0%E6%8D%AE%E8%AF%B7%E6%B1%82%E5%B0%81%E8%A3%85%E8%AF%A6%E8%A7%A3.html"}],["meta",{"property":"og:site_name","content":"文学博客"}],["meta",{"property":"og:title","content":"HarmonyOS http 请求封装"}],["meta",{"property":"og:description","content":"HarmonyOS http 请求封装 步骤 1、定义响应数据格式 2、封装数据请求 3、将各种请求进行模块划分 4、请求示例 项目目录 1、定义响应数据格式 2、封装数据请求 提示：具体更详细的配置请参考官网 3、将各种请求进行模块划分 熟悉vue开发的同学都知道我们不同模块的请求一般放在api目录下进行划分 如下以请求用户User模块为示例 4、附..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://pic.imgdb.cn/item/6568ba96c458853aefa2e148.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:alt","content":"HarmonyOS http 请求封装"}],["meta",{"property":"article:author","content":"sixkey"}],["meta",{"property":"article:tag","content":"HarmonyOS"}],["meta",{"property":"article:published_time","content":"2022-01-12T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"HarmonyOS http 请求封装\\",\\"image\\":[\\"https://pic.imgdb.cn/item/6568ba96c458853aefa2e148.png\\"],\\"datePublished\\":\\"2022-01-12T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"sixkey\\",\\"url\\":\\"https://swx08.github.io\\"}]}"]]},"headers":[{"level":3,"title":"步骤","slug":"步骤","link":"#步骤","children":[]},{"level":3,"title":"1、定义响应数据格式","slug":"_1、定义响应数据格式","link":"#_1、定义响应数据格式","children":[]},{"level":3,"title":"2、封装数据请求","slug":"_2、封装数据请求","link":"#_2、封装数据请求","children":[]},{"level":3,"title":"3、将各种请求进行模块划分","slug":"_3、将各种请求进行模块划分","link":"#_3、将各种请求进行模块划分","children":[]},{"level":3,"title":"4、附上一个请求示例","slug":"_4、附上一个请求示例","link":"#_4、附上一个请求示例","children":[]}],"git":{},"readingTime":{"minutes":2.48,"words":744},"filePathRelative":"posts/HarmonyOS/鸿蒙 HarmonyOS4.0 Http数据请求封装详解.md","localizedDate":"2022年1月12日","excerpt":"\\n<h3><strong>步骤</strong></h3>\\n<blockquote>\\n<p><strong>1、定义响应数据格式</strong></p>\\n<p><strong>2、封装数据请求</strong></p>\\n<p><strong>3、将各种请求进行模块划分</strong></p>\\n<p><strong>4、请求示例</strong></p>\\n</blockquote>\\n<p><strong>项目目录</strong></p>\\n<figure><img src=\\"https://pic.imgdb.cn/item/6568ba96c458853aefa2e148.png\\" alt=\\"\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption></figcaption></figure>","autoDesc":true}');export{k as comp,d as data};
