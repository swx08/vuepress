import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as l,o,c as r,b as n,e,d as a,a as t}from"./app-DCsLG_oX.js";const i={},c=t('<h1 id="springcloud" tabindex="-1"><a class="header-anchor" href="#springcloud"><span>SpringCloud</span></a></h1><h2 id="套路" tabindex="-1"><a class="header-anchor" href="#套路"><span>套路：</span></a></h2><h3 id="_1-导入依赖" tabindex="-1"><a class="header-anchor" href="#_1-导入依赖"><span>1.导入依赖</span></a></h3><h3 id="_2-编写配置文件" tabindex="-1"><a class="header-anchor" href="#_2-编写配置文件"><span>2.编写配置文件</span></a></h3><h3 id="_3-开启这个功能" tabindex="-1"><a class="header-anchor" href="#_3-开启这个功能"><span>3.开启这个功能</span></a></h3><h3 id="_4-配置类" tabindex="-1"><a class="header-anchor" href="#_4-配置类"><span>4.配置类</span></a></h3><h2 id="前言-如何学习springcloud" tabindex="-1"><a class="header-anchor" href="#前言-如何学习springcloud"><span>前言：如何学习SpringCloud?</span></a></h2><p>1、Api : 网关及路由</p><p>2、通信 : http、RPC</p><p>3、注册和发现 : 注册中心及高可用</p><p>4、熔断机制 : 服务降级(容错)</p>',11),u={href:"https://imgse.com/i/ppH3QIO",target:"_blank",rel:"noopener noreferrer"},d=n("img",{src:"https://s1.ax1x.com/2023/04/08/ppH3QIO.md.png",alt:"ppH3QIO.md.png",tabindex:"0",loading:"lazy"},null,-1),k=n("figcaption",null,"ppH3QIO.md.png",-1),h=t('<h2 id="一、基础知识" tabindex="-1"><a class="header-anchor" href="#一、基础知识"><span>一、基础知识</span></a></h2><h3 id="_1、springboot-和-springcloud关系" tabindex="-1"><a class="header-anchor" href="#_1、springboot-和-springcloud关系"><span>1、SpringBoot 和 SpringCloud关系</span></a></h3><p>1.1 SpringBoot专注于快速方便的开发单个个体微服务。</p><p>1.2 SpringCloud是关注全局的微服务协调治理框架，它将SpringBoot开发的一个个体微服务整合并管理起来，为各个微服务之间提供: 配置管理，服务发现，断路器，路由，微代理，事件总线，全局锁，决策竞选，分布式会话等集成服务。</p><p>1.3 SpringBoot可以离开SpringCloud独立使用，开发项目，但是SpringCloud离不开SpringBoot，属于依赖关系</p><p><strong>SpringBoot专注于快捷、方便的开发单个个体微服务，SpringCloud关注全局的服务治理框架</strong></p><h3 id="_2、技术选型-dubbo和springcloud对比" tabindex="-1"><a class="header-anchor" href="#_2、技术选型-dubbo和springcloud对比"><span>2、技术选型：Dubbo和SpringCloud对比</span></a></h3>',7),g={href:"https://imgse.com/i/ppH31iD",target:"_blank",rel:"noopener noreferrer"},v=n("img",{src:"https://s1.ax1x.com/2023/04/08/ppH31iD.md.png",alt:"ppH31iD.md.png",tabindex:"0",loading:"lazy"},null,-1),m=n("figcaption",null,"ppH31iD.md.png",-1),b=n("h3",{id:"_3-推荐自学网址",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_3-推荐自学网址"},[n("span",null,"3.推荐自学网址")])],-1),_=n("strong",null,"一站式重点自学网站",-1),E={href:"http://c.biancheng.net/",target:"_blank",rel:"noopener noreferrer"},f=n("p",null,"Spring Cloud Netflix : https://springcloud.cc/spring-cloud-netflix.html",-1),S=n("p",null,"中文API文档：https://springcloud.cc/spring-cloud-dalston.html",-1),C=n("p",null,"SpringCloud中国社区：http://springcloud.cn/",-1),x=n("p",null,"SpringCloud中文网：https://springcloud.cc",-1),y=n("strong",null,"SpringCloud自学网站重点",-1),A={href:"http://c.biancheng.net/springcloud/eureka.html",target:"_blank",rel:"noopener noreferrer"},P=t(`<h2 id="二、rest学习" tabindex="-1"><a class="header-anchor" href="#二、rest学习"><span>二、Rest学习</span></a></h2><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@RestController</span>
<span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/consumer&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DeptConsumerController</span> <span class="token punctuation">{</span>
    <span class="token comment">//注意：消费者不应该有service层</span>
    <span class="token comment">//RestTemplate,注册到Spring中</span>
    <span class="token comment">//String url, Class&lt;T&gt; responseType</span>
    <span class="token annotation punctuation">@Autowired</span><span class="token comment">//提供多种便捷访问远程http服务的方法，简单的restful模板</span>
    <span class="token keyword">private</span> <span class="token class-name">RestTemplate</span> restTemplate<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">REST_URL_PREFIX</span> <span class="token operator">=</span> <span class="token string">&quot;http://localhost:8001&quot;</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/dept/{id}&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">Dept</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> <span class="token class-name">Integer</span> id<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> restTemplate<span class="token punctuation">.</span><span class="token function">getForObject</span><span class="token punctuation">(</span><span class="token constant">REST_URL_PREFIX</span> <span class="token operator">+</span> <span class="token string">&quot;/dept/&quot;</span><span class="token operator">+</span>id<span class="token punctuation">,</span><span class="token class-name">Dept</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/dept/add&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">addDept</span><span class="token punctuation">(</span><span class="token class-name">Dept</span> dept<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//不能加@requestBody此注解</span>
        <span class="token keyword">return</span> restTemplate<span class="token punctuation">.</span><span class="token function">postForObject</span><span class="token punctuation">(</span><span class="token constant">REST_URL_PREFIX</span> <span class="token operator">+</span> <span class="token string">&quot;/dept/add&quot;</span><span class="token punctuation">,</span>dept<span class="token punctuation">,</span><span class="token keyword">boolean</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/list&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Dept</span><span class="token punctuation">&gt;</span></span> <span class="token function">getAllDept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> restTemplate<span class="token punctuation">.</span><span class="token function">getForObject</span><span class="token punctuation">(</span><span class="token constant">REST_URL_PREFIX</span> <span class="token operator">+</span> <span class="token string">&quot;/dept/list&quot;</span><span class="token punctuation">,</span><span class="token class-name">List</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="template" tabindex="-1"><a class="header-anchor" href="#template"><span>Template</span></a></h3><p>RestTemplate是Spring提供的用于访问Rest服务的客端，RestTemplate提供多种便捷访问远程http服务的方法，简单的restful模板</p><h2 id="三、eureka" tabindex="-1"><a class="header-anchor" href="#三、eureka"><span>三、Eureka</span></a></h2><h3 id="_1-实现服务注册与发现的原理" tabindex="-1"><a class="header-anchor" href="#_1-实现服务注册与发现的原理"><span>1. 实现服务注册与发现的原理</span></a></h3>`,6),w={href:"https://imgse.com/i/ppHK10S",target:"_blank",rel:"noopener noreferrer"},R=n("img",{src:"https://s1.ax1x.com/2023/04/08/ppHK10S.png",alt:"ppHK10S.png",tabindex:"0",loading:"lazy"},null,-1),B=n("figcaption",null,"ppHK10S.png",-1),I=t(`<p>Eureka三大角色：</p><ul><li><strong>服务注册中心（Register Service）</strong>：它是一个 Eureka Server，用于提供服务注册和发现功能。</li><li><strong>服务提供者（Provider Service）</strong>：它是一个 Eureka Client，用于提供服务。它将自己提供的服务注册到服务注册中心，以供服务消费者发现。</li><li><strong>服务消费者（Consumer Service）</strong>：它是一个 Eureka Client，用于消费服务。它可以从服务注册中心获取服务列表，调用所需的服务。</li></ul><h3 id="_2-eureka-实现服务注册与发现的流程如下" tabindex="-1"><a class="header-anchor" href="#_2-eureka-实现服务注册与发现的流程如下"><span>2.Eureka 实现服务注册与发现的流程如下：</span></a></h3><ol><li>搭建一个 Eureka Server 作为服务注册中心；</li><li>服务提供者 Eureka Client 启动时，会把当前服务器的信息以服务名（spring.application.name）的方式注册到服务注册中心；</li><li>服务消费者 Eureka Client 启动时，也会向服务注册中心注册；</li><li>服务消费者还会获取一份可用服务列表，该列表中包含了所有注册到服务注册中心的服务信息（包括服务提供者和自身的信息）；</li><li>在获得了可用服务列表后，服务消费者通过 HTTP 或消息中间件远程调用服务提供者提供的服务。</li><li>服务注册中心（Eureka Server）所扮演的角色十分重要，它是服务提供者和服务消费者之间的桥梁。服务提供者只有将自己的服务注册到服务注册中心才可能被服务消费者调用，而服务消费者也只有通过服务注册中心获取可用服务列表后，才能调用所需的服务。</li></ol><h3 id="_3-eureka使用" tabindex="-1"><a class="header-anchor" href="#_3-eureka使用"><span>3.Eureka使用</span></a></h3><p><strong>说明：Eureka是作为服务端Server，所以都是eureka-server。</strong></p><p><strong>而Provider和Consumer则是作为客户端Client,所以都是eureka-client</strong></p><h4 id="一-作为注册中心的配置" tabindex="-1"><a class="header-anchor" href="#一-作为注册中心的配置"><span>(一)作为注册中心的配置</span></a></h4><h4 id="_3-1-导入服务端依赖" tabindex="-1"><a class="header-anchor" href="#_3-1-导入服务端依赖"><span>3.1 导入服务端依赖</span></a></h4><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token generics"><span class="token punctuation">&lt;</span>dependency<span class="token punctuation">&gt;</span></span>
            <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">&gt;</span></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">&gt;</span>
            <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">&gt;</span></span>spring<span class="token operator">-</span>cloud<span class="token operator">-</span>starter<span class="token operator">-</span>eureka<span class="token operator">-</span>server<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">&gt;</span>
            <span class="token generics"><span class="token punctuation">&lt;</span>version<span class="token punctuation">&gt;</span></span><span class="token number">1.4</span><span class="token number">.6</span><span class="token punctuation">.</span><span class="token constant">RELEASE</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-2-eureka配置文件" tabindex="-1"><a class="header-anchor" href="#_3-2-eureka配置文件"><span>3.2 Eureka配置文件</span></a></h4><div class="language-properties line-numbers-mode" data-ext="properties" data-title="properties"><pre class="language-properties"><code><span class="token key attr-name">server.port</span><span class="token punctuation">=</span><span class="token value attr-value">7001</span>

<span class="token comment">#Eureka配置</span>
<span class="token key attr-name">eureka.instance.hostname</span><span class="token punctuation">=</span><span class="token value attr-value">localhost</span>
<span class="token comment">#表示是否向Eureka注册中心注册自己</span>
<span class="token key attr-name">eureka.client.register-with-eureka</span><span class="token punctuation">=</span><span class="token value attr-value">false</span>
<span class="token comment">#fetch-register如果为false,则表示自己为注册中心</span>
<span class="token key attr-name">eureka.client.fetch-registry</span><span class="token punctuation">=</span><span class="token value attr-value">false</span>
<span class="token comment">#监控页面</span>
<span class="token key attr-name">eureka.client.service-url.defaultZone</span><span class="token punctuation">=</span><span class="token value attr-value">http://\${eureka.instance.hostname}:\${server.port}/eureka/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-3-配置启动类并开启-enableeurekaserver" tabindex="-1"><a class="header-anchor" href="#_3-3-配置启动类并开启-enableeurekaserver"><span>3.3 配置启动类并开启@EnableEurekaServer</span></a></h4><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@SpringBootApplication</span> <span class="token comment">//启动后，可以访问http://localhost:7001</span>
<span class="token annotation punctuation">@EnableEurekaServer</span> <span class="token comment">//服务端的启动类，可以接受别人注册进来</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringApplicationEureka</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">SpringApplicationEureka</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="二-作为服务提供者的配置" tabindex="-1"><a class="header-anchor" href="#二-作为服务提供者的配置"><span>(二)作为服务提供者的配置</span></a></h4><h4 id="_3-1-导入依赖" tabindex="-1"><a class="header-anchor" href="#_3-1-导入依赖"><span>3.1 导入依赖</span></a></h4><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token generics"><span class="token punctuation">&lt;</span>dependency<span class="token punctuation">&gt;</span></span>
            <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">&gt;</span></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">&gt;</span>
            <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">&gt;</span></span>spring<span class="token operator">-</span>cloud<span class="token operator">-</span>starter<span class="token operator">-</span>eureka<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">&gt;</span>
            <span class="token generics"><span class="token punctuation">&lt;</span>version<span class="token punctuation">&gt;</span></span><span class="token number">1.4</span><span class="token number">.6</span><span class="token punctuation">.</span><span class="token constant">RELEASE</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-2-provider配置文件" tabindex="-1"><a class="header-anchor" href="#_3-2-provider配置文件"><span>3.2 Provider配置文件</span></a></h4><div class="language-properties line-numbers-mode" data-ext="properties" data-title="properties"><pre class="language-properties"><code><span class="token comment">#配置Euerka地址</span>
<span class="token key attr-name">eureka.client.service-url.defaultZone</span><span class="token punctuation">=</span><span class="token value attr-value">http://localhost:7001/eureka/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-3-配置启动类并开启-enableeurekaclient" tabindex="-1"><a class="header-anchor" href="#_3-3-配置启动类并开启-enableeurekaclient"><span>3.3 配置启动类并开启@EnableEurekaClient</span></a></h4><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@SpringBootApplication</span><span class="token comment">//启动类</span>
<span class="token annotation punctuation">@EnableEurekaClient</span> <span class="token comment">//在服务启动后自动注册到Eureka注册中心！</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DeptProvider_8001_application</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">DeptProvider_8001_application</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-eureka自我保护机制" tabindex="-1"><a class="header-anchor" href="#_4-eureka自我保护机制"><span>4. Eureka自我保护机制</span></a></h3><p>当我们在本地调试基于 Eureka 的程序时，Eureka 服务注册中心很有可能会出现如下图所示的红色警告。</p><img src="http://c.biancheng.net/uploads/allimg/211210/10103014a-7.png" alt="Eureka 自我保护机制" style="zoom:50%;">`,24),H=n("p",null,"实际上，这个警告是触发了 Eureka 的自我保护机制而出现的。默认情况下，如果 Eureka Server 在一段时间内（默认为 90 秒）没有接收到某个服务提供者（Eureka Client）的心跳，就会将这个服务提供者提供的服务从服务注册表中移除。 这样服务消费者就再也无法从服务注册中心中获取到这个服务了，更无法调用该服务。",-1),j=n("p",null,"但在实际的分布式微服务系统中，健康的服务（Eureka Client）也有可能会由于网络故障（例如网络延迟、卡顿、拥挤等原因）而无法与 Eureka Server 正常通讯。若此时 Eureka Server 因为没有接收心跳而误将健康的服务从服务列表中移除，这显然是不合理的。而 Eureka 的自我保护机制就是来解决此问题的。",-1),T=n("p",null,"所谓 “Eureka 的自我保护机制”，其中心思想就是“好死不如赖活着”。如果 Eureka Server 在一段时间内没有接收到 Eureka Client 的心跳，那么 Eureka Server 就会开启自我保护模式，将所有的 Eureka Client 的注册信息保护起来，而不是直接从服务注册表中移除。一旦网络恢复，这些 Eureka Client 提供的服务还可以继续被服务消费者消费。",-1),q=n("p",null,"综上，Eureka 的自我保护机制是一种应对网络异常的安全保护措施。它的架构哲学是：宁可同时保留所有微服务（健康的服务和不健康的服务都会保留）也不盲目移除任何健康的服务。通过 Eureka 的自我保护机制，可以让 Eureka Server 集群更加的健壮、稳定。",-1),D={href:"http://c.biancheng.net/springcloud/ribbon.html",target:"_blank",rel:"noopener noreferrer"},z={href:"http://c.biancheng.net/springcloud/hystrix.html",target:"_blank",rel:"noopener noreferrer"},O=t(`<p>默认情况下，Eureka 的自我保护机制是开启的，如果想要关闭，则需要在配置文件中添加以下配置。</p><div class="language-properties line-numbers-mode" data-ext="properties" data-title="properties"><pre class="language-properties"><code><span class="token key attr-name">eureka.server.enable-self-preservation</span><span class="token punctuation">=</span><span class="token value attr-value">false # false 关闭 Eureka 的自我保护机制，默认是开启,一般不建议大家修改</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,2),Q=n("h3",{id:"_5-cap原则及对比zookeeper",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_5-cap原则及对比zookeeper"},[n("span",null,"5.CAP原则及对比Zookeeper")])],-1),F=n("h4",{id:"_5-1-简介",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_5-1-简介"},[n("span",null,"5.1 简介")])],-1),L={href:"https://baike.baidu.com/item/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F/4905336",target:"_blank",rel:"noopener noreferrer"},N={href:"https://baike.baidu.com/item/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F/4905336",target:"_blank",rel:"noopener noreferrer"},Z=t('<p>可用性（A）：保证每个请求不管成功或者失败都有响应。</p><p>分区容忍性（P）：系统中任意信息的丢失或失败不会影响系统的继续运作。</p><p>CAP原则的精髓就是要么AP，要么CP，要么AC，但是不存在CAP。如果在某个分布式系统中数据无副本， 那么系统必然满足强一致性条件， 因为只有独一数据，不会出现数据不一致的情况，此时C和P两要素具备，但是如果系统发生了网络分区状况或者宕机，必然导致某些数据不可以访问，此时可用性条件就不能被满足，即在此情况下获得了CP系统，但是CAP不可同时满足</p><h4 id="_5-2-作为服务注册中心-eureka和zookeeper的对比" tabindex="-1"><a class="header-anchor" href="#_5-2-作为服务注册中心-eureka和zookeeper的对比"><span>5.2 作为服务注册中心，eureka和zookeeper的对比</span></a></h4><p>前面说到，一个分布式系统不能同时满足CAP原则，相对的分错容错性是分布式系统必不可少的一个部分，所以对于分布式系统只有两种原则实现：AP\\CP</p><p>ZOOKEEPER：保证的是CP原则，即当我们向服务中心请求资源时，我们可以容忍服务中心返回的是几分钟前的信息，但不接受服务器直接挂掉不可用，也就是说，一致性相对高于可用性，BUG：zk存在一个问题，集群中当master节点挂掉，集群会进行一次内部选举，选一个新的节点作为master，这个时间是很长的(30~120s)，在此期间集群处于不可用状态，导致服务瘫痪，这是不可容忍的。</p><p>EUREKA：保证的是AP原则，相对zookeeper来说eureka的各个节点都是平等的，几个节点挂掉并不会影响服务的使用，客户端再向服务中心注册服务时，只要有一个节点可用，就不影响服务的注册，另外eureka提供自我保护机制，当一段时间（15min）内超过85%的服务没有心跳时，eureka会认为客户端与服务中心出现网络故障，eureka会采用以下方式处理：</p><p><strong>eureka不再移除服务列表中因为长时间没有心跳而应该过期的服务</strong><strong>eureka仍可以接受新服务的注册即查询请求，但不会同步到其他节点，保证当前节点可用， 一旦其他节点恢复，再同步</strong></p><h4 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h4><p><strong>因此，Eureka可以很好的应对因网络故障导致不部分节点失去联系的情况,而不会像zookeeper那样使整个注册中心服务瘫痪。</strong></p>',10);function K(U,M){const s=l("ExternalLinkIcon");return o(),r("div",null,[c,n("figure",null,[n("a",u,[d,e(s)]),k]),h,n("figure",null,[n("a",g,[v,e(s)]),m]),b,n("p",null,[_,a("："),n("a",E,[a("C语言中文网：C语言程序设计门户网站(入门教程、编程软件) (biancheng.net)"),e(s)])]),f,S,C,x,n("p",null,[y,a("："),n("a",A,[a("Eureka：Spring Cloud服务注册与发现组件（非常详细） (biancheng.net)"),e(s)])]),P,n("figure",null,[n("a",w,[R,e(s)]),B]),I,a(" 图8：Eureka 自我保护提示 "),H,j,T,q,n("blockquote",null,[n("p",null,[a("Eureka 的自我保护机制也存在弊端。如果在 Eureka 自我保护机制触发期间，服务提供者提供的服务出现问题，那么服务消费者就很容易获取到已经不存在的服务进而出现调用失败的情况，此时，我们可以通过客户端的容错机制来解决此问题，详情请参考 "),n("a",D,[a("Spring Cloud Netflix Ribbon"),e(s)]),a(" 和 "),n("a",z,[a("Spring Cloud Netflix Hystrix"),e(s)]),a("。")]),O]),Q,F,n("p",null,[a("CAP原则又称CAP定理，指的是在一个"),n("a",L,[a("分布式系统"),e(s)]),a("中， Consistency（一致性）、 Availability（可用性）、Partition tolerance（分区容错性），三者不可得兼。")]),n("p",null,[a("一致性（C）：在"),n("a",N,[a("分布式系统"),e(s)]),a("中的所有数据备份，在同一时刻是否同样的值。（等同于所有节点访问同一份最新的数据副本）")]),Z])}const $=p(i,[["render",K],["__file","SpringCloud学习文档.html.vue"]]),G=JSON.parse('{"path":"/posts/%E5%90%8E%E7%AB%AF/%E5%BE%AE%E6%9C%8D%E5%8A%A1/SpringCloud%E5%AD%A6%E4%B9%A0%E6%96%87%E6%A1%A3.html","title":"SpringCloud","lang":"zh-CN","frontmatter":{"category":["后端"],"tag":["SpringCloud","微服务"],"date":"2022-01-12T00:00:00.000Z","star":true,"sticky":true,"description":"SpringCloud 套路： 1.导入依赖 2.编写配置文件 3.开启这个功能 4.配置类 前言：如何学习SpringCloud? 1、Api : 网关及路由 2、通信 : http、RPC 3、注册和发现 : 注册中心及高可用 4、熔断机制 : 服务降级(容错) ppH3QIO.md.pngppH3QIO.md.png 一、基础知识 1、Sprin...","head":[["meta",{"property":"og:url","content":"https://swx08.github.io/vuepress/posts/%E5%90%8E%E7%AB%AF/%E5%BE%AE%E6%9C%8D%E5%8A%A1/SpringCloud%E5%AD%A6%E4%B9%A0%E6%96%87%E6%A1%A3.html"}],["meta",{"property":"og:site_name","content":"文学博客"}],["meta",{"property":"og:title","content":"SpringCloud"}],["meta",{"property":"og:description","content":"SpringCloud 套路： 1.导入依赖 2.编写配置文件 3.开启这个功能 4.配置类 前言：如何学习SpringCloud? 1、Api : 网关及路由 2、通信 : http、RPC 3、注册和发现 : 注册中心及高可用 4、熔断机制 : 服务降级(容错) ppH3QIO.md.pngppH3QIO.md.png 一、基础知识 1、Sprin..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://s1.ax1x.com/2023/04/08/ppH3QIO.md.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:alt","content":"SpringCloud"}],["meta",{"property":"article:author","content":"sixkey"}],["meta",{"property":"article:tag","content":"SpringCloud"}],["meta",{"property":"article:tag","content":"微服务"}],["meta",{"property":"article:published_time","content":"2022-01-12T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"SpringCloud\\",\\"image\\":[\\"https://s1.ax1x.com/2023/04/08/ppH3QIO.md.png\\",\\"https://s1.ax1x.com/2023/04/08/ppH31iD.md.png\\",\\"https://s1.ax1x.com/2023/04/08/ppHK10S.png\\"],\\"datePublished\\":\\"2022-01-12T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"sixkey\\",\\"url\\":\\"https://swx08.github.io\\"}]}"]]},"headers":[{"level":2,"title":"套路：","slug":"套路","link":"#套路","children":[{"level":3,"title":"1.导入依赖","slug":"_1-导入依赖","link":"#_1-导入依赖","children":[]},{"level":3,"title":"2.编写配置文件","slug":"_2-编写配置文件","link":"#_2-编写配置文件","children":[]},{"level":3,"title":"3.开启这个功能","slug":"_3-开启这个功能","link":"#_3-开启这个功能","children":[]},{"level":3,"title":"4.配置类","slug":"_4-配置类","link":"#_4-配置类","children":[]}]},{"level":2,"title":"前言：如何学习SpringCloud?","slug":"前言-如何学习springcloud","link":"#前言-如何学习springcloud","children":[]},{"level":2,"title":"一、基础知识","slug":"一、基础知识","link":"#一、基础知识","children":[{"level":3,"title":"1、SpringBoot 和 SpringCloud关系","slug":"_1、springboot-和-springcloud关系","link":"#_1、springboot-和-springcloud关系","children":[]},{"level":3,"title":"2、技术选型：Dubbo和SpringCloud对比","slug":"_2、技术选型-dubbo和springcloud对比","link":"#_2、技术选型-dubbo和springcloud对比","children":[]},{"level":3,"title":"3.推荐自学网址","slug":"_3-推荐自学网址","link":"#_3-推荐自学网址","children":[]}]},{"level":2,"title":"二、Rest学习","slug":"二、rest学习","link":"#二、rest学习","children":[{"level":3,"title":"Template","slug":"template","link":"#template","children":[]}]},{"level":2,"title":"三、Eureka","slug":"三、eureka","link":"#三、eureka","children":[{"level":3,"title":"1. 实现服务注册与发现的原理","slug":"_1-实现服务注册与发现的原理","link":"#_1-实现服务注册与发现的原理","children":[]},{"level":3,"title":"2.Eureka 实现服务注册与发现的流程如下：","slug":"_2-eureka-实现服务注册与发现的流程如下","link":"#_2-eureka-实现服务注册与发现的流程如下","children":[]},{"level":3,"title":"3.Eureka使用","slug":"_3-eureka使用","link":"#_3-eureka使用","children":[{"level":4,"title":"(一)作为注册中心的配置","slug":"一-作为注册中心的配置","link":"#一-作为注册中心的配置","children":[]},{"level":4,"title":"3.1 导入服务端依赖","slug":"_3-1-导入服务端依赖","link":"#_3-1-导入服务端依赖","children":[]},{"level":4,"title":"3.2 Eureka配置文件","slug":"_3-2-eureka配置文件","link":"#_3-2-eureka配置文件","children":[]},{"level":4,"title":"3.3 配置启动类并开启@EnableEurekaServer","slug":"_3-3-配置启动类并开启-enableeurekaserver","link":"#_3-3-配置启动类并开启-enableeurekaserver","children":[]},{"level":4,"title":"(二)作为服务提供者的配置","slug":"二-作为服务提供者的配置","link":"#二-作为服务提供者的配置","children":[]},{"level":4,"title":"3.1 导入依赖","slug":"_3-1-导入依赖","link":"#_3-1-导入依赖","children":[]},{"level":4,"title":"3.2 Provider配置文件","slug":"_3-2-provider配置文件","link":"#_3-2-provider配置文件","children":[]},{"level":4,"title":"3.3 配置启动类并开启@EnableEurekaClient","slug":"_3-3-配置启动类并开启-enableeurekaclient","link":"#_3-3-配置启动类并开启-enableeurekaclient","children":[]}]},{"level":3,"title":"4. Eureka自我保护机制","slug":"_4-eureka自我保护机制","link":"#_4-eureka自我保护机制","children":[]},{"level":3,"title":"5.CAP原则及对比Zookeeper","slug":"_5-cap原则及对比zookeeper","link":"#_5-cap原则及对比zookeeper","children":[{"level":4,"title":"5.1 简介","slug":"_5-1-简介","link":"#_5-1-简介","children":[]},{"level":4,"title":"5.2 作为服务注册中心，eureka和zookeeper的对比","slug":"_5-2-作为服务注册中心-eureka和zookeeper的对比","link":"#_5-2-作为服务注册中心-eureka和zookeeper的对比","children":[]},{"level":4,"title":"总结","slug":"总结","link":"#总结","children":[]}]}]}],"git":{},"readingTime":{"minutes":9.1,"words":2729},"filePathRelative":"posts/后端/微服务/SpringCloud学习文档.md","localizedDate":"2022年1月12日","excerpt":"\\n<h2>套路：</h2>\\n<h3>1.导入依赖</h3>\\n<h3>2.编写配置文件</h3>\\n<h3>3.开启这个功能</h3>\\n<h3>4.配置类</h3>\\n<h2>前言：如何学习SpringCloud?</h2>\\n<p>1、Api  : 网关及路由</p>\\n<p>2、通信 : http、RPC</p>\\n<p>3、注册和发现 : 注册中心及高可用</p>\\n<p>4、熔断机制 : 服务降级(容错)</p>\\n<figure><a href=\\"https://imgse.com/i/ppH3QIO\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\"><img src=\\"https://s1.ax1x.com/2023/04/08/ppH3QIO.md.png\\" alt=\\"ppH3QIO.md.png\\" tabindex=\\"0\\" loading=\\"lazy\\"></a><figcaption>ppH3QIO.md.png</figcaption></figure>","autoDesc":true}');export{$ as comp,G as data};
