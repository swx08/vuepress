import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as p,o,c as l,b as n,e as a,a as e}from"./app-DCsLG_oX.js";const i={},c=e(`<h1 id="redis快速入门" tabindex="-1"><a class="header-anchor" href="#redis快速入门"><span>Redis快速入门</span></a></h1><h3 id="一、redis-概述" tabindex="-1"><a class="header-anchor" href="#一、redis-概述"><span>一、Redis 概述</span></a></h3><p><strong>Redis 介绍</strong></p><ul><li>Redis 是一个开源的 key-value 存储系统。</li><li>和 Memcached 类似，它支持存储的 value 类型相对更多，包括 string (字符串)、list (链表)、set (集合)、zset (sorted set –有序集合) 和 hash（哈希类型）。</li><li>这些数据类型都支持 push/pop、add/remove 及取交集并集和差集及更丰富的操作，而且这些操作都是原子性的。</li><li>在此基础上，Redis 支持各种不同方式的排序。</li><li>与 memcached 一样，为了保证效率，数据都是缓存在内存中。</li><li>区别的是 Redis 会周期性的把更新的数据写入磁盘或者把修改操作写入追加的记录文件。</li><li>并且在此基础上实现了 master-slave (主从) 同步。应用场景配合关系型数据库做高速缓存</li></ul><p><strong>应用场景</strong></p><ul><li><p>高频次，热门访问的数据，降低数据库IO。</p></li><li><p>分布式架构，做 session 共享。</p></li></ul><figure><img src="https://cdn.jsdelivr.net/gh/zhangc233/pic@master/img/image-20210618160003509.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>多样的数据结构存储持久化数据</p><figure><img src="https://cdn.jsdelivr.net/gh/zhangc233/pic@master/img/image-20210618160101040.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>相关技术</strong></p><p><strong>Redis 使用的是单线程 + 多路 IO 复用技术：</strong></p><p>多路复用是指使用一个线程来检查多个文件描述符（Socket）的就绪状态，比如调用 select 和 poll 函数，传入多个文件描述符，如果有一个文件描述符就绪，则返回，否则阻塞直到超时。得到就绪状态后进行真正的操作可以在同一个线程里执行，也可以启动线程执行（比如使用线程池）。</p><p><strong>串行 vs 多线程 + 锁（memcached） vs 单线程 + 多路 IO 复用 (Redis)</strong>（与 Memcache 三点不同：支持多数据类型，支持持久化，单线程 + 多路 IO 复用） 。</p><h3 id="二、key键操作" tabindex="-1"><a class="header-anchor" href="#二、key键操作"><span>二、Key键操作</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>keys * <span class="token comment"># 查看当前所有key</span>
exists key <span class="token comment"># 判断某个Key是否存在</span>
<span class="token builtin class-name">type</span> key <span class="token comment"># 查看你的key是什么类型</span>
del key <span class="token comment"># 删除指定的key数据</span>
unlink key <span class="token comment"># 根据value选择非阻塞删除,仅将Keys从Keyspace元数据中删除，真正的删除会在后续异步操作</span>
expire key <span class="token number">10</span> <span class="token comment"># 10秒钟：为给定的Key设置过期时间</span>
ttl key <span class="token comment"># 查看还有多少秒过期，-1表示永不过期，-2表示已过期</span>
<span class="token keyword">select</span> <span class="token number">0</span> <span class="token comment"># 切换数据库命令</span>
dbsize <span class="token comment"># 查看当前数据库的key的数量</span>
flushdb <span class="token comment"># 清空当前库</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="三、常用数据类型" tabindex="-1"><a class="header-anchor" href="#三、常用数据类型"><span>三、常用数据类型</span></a></h3><h4 id="_1、string字符串" tabindex="-1"><a class="header-anchor" href="#_1、string字符串"><span><strong>1、String字符串</strong></span></a></h4><p><strong>常用命令</strong></p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token builtin class-name">set</span> key1 value <span class="token comment"># 设置Key值</span>
get key2 value <span class="token comment"># 获取Key值</span>
append <span class="token operator">&lt;</span>key<span class="token operator">&gt;</span><span class="token operator">&lt;</span>value<span class="token operator">&gt;</span> <span class="token comment"># 将给定的&lt;value&gt;追加到原值的末尾</span>
strlen <span class="token operator">&lt;</span>key<span class="token operator">&gt;</span> <span class="token comment"># 获取值的长度</span>
setnx <span class="token operator">&lt;</span>key<span class="token operator">&gt;</span><span class="token operator">&lt;</span>value<span class="token operator">&gt;</span> <span class="token comment"># 只有在Key不存在时，设置key的值</span>
incr <span class="token operator">&lt;</span>key<span class="token operator">&gt;</span> <span class="token comment"># 将key中储存的数字值加1；只能对数字值操作，如果为空，新增值为1</span>
decr <span class="token operator">&lt;</span>key<span class="token operator">&gt;</span> <span class="token comment"># 将Key中储存的数字值减1</span>
incrby / decrby <span class="token operator">&lt;</span>key<span class="token operator">&gt;</span><span class="token operator">&lt;</span>步长<span class="token operator">&gt;</span> <span class="token comment"># 将Key中储存的数字值增减。自定义步长。</span>
mset <span class="token operator">&lt;</span>key<span class="token operator"><span class="token file-descriptor important">1</span>&gt;</span><span class="token operator">&lt;</span>value<span class="token operator"><span class="token file-descriptor important">1</span>&gt;</span><span class="token operator">&lt;</span>key<span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span><span class="token operator">&lt;</span>value<span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span><span class="token punctuation">..</span>. <span class="token comment"># 同时设置一个或多个key-value对</span>
mget <span class="token operator">&lt;</span>key<span class="token operator"><span class="token file-descriptor important">1</span>&gt;</span><span class="token operator">&lt;</span>key<span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span><span class="token operator">&lt;</span>key<span class="token operator"><span class="token file-descriptor important">3</span>&gt;</span> <span class="token comment"># 同时获取一个或多个value</span>
msetnx <span class="token operator">&lt;</span>key<span class="token operator"><span class="token file-descriptor important">1</span>&gt;</span><span class="token operator">&lt;</span>value<span class="token operator"><span class="token file-descriptor important">1</span>&gt;</span><span class="token operator">&lt;</span>key<span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span><span class="token operator">&lt;</span>value<span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span> <span class="token comment"># 同时设置一个或多个key-value对，当且仅当所有给定Key都不存在</span>
setex <span class="token operator">&lt;</span>key<span class="token operator">&gt;</span><span class="token operator">&lt;</span>过期时间<span class="token operator">&gt;</span><span class="token operator">&lt;</span>value<span class="token operator">&gt;</span> <span class="token comment"># 设置键值的同时，设置过期时间，单位秒</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2、list列表" tabindex="-1"><a class="header-anchor" href="#_2、list列表"><span><strong>2、List列表</strong></span></a></h4><p><strong>底层是个双向链表存储</strong></p><p><strong>常用命令</strong></p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>lpush / rpush <span class="token operator">&lt;</span>key<span class="token operator">&gt;</span><span class="token operator">&lt;</span>value<span class="token operator"><span class="token file-descriptor important">1</span>&gt;</span><span class="token operator">&lt;</span>value<span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span><span class="token operator">&lt;</span>value<span class="token operator"><span class="token file-descriptor important">3</span>&gt;</span><span class="token punctuation">..</span>. <span class="token comment"># 从左边 / 右边插入一个或多个值</span>
lpop / rpop <span class="token operator">&lt;</span>key<span class="token operator">&gt;</span> <span class="token comment"># 从左边 / 右边吐出一个值。值在键在，值亡键亡</span>
rpoplpush <span class="token operator">&lt;</span>key<span class="token operator"><span class="token file-descriptor important">1</span>&gt;</span><span class="token operator">&lt;</span>key<span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span> <span class="token comment"># 从&lt;key1&gt;列表右边吐出一个值，插入到&lt;key2&gt;列表左边</span>
lrange <span class="token operator">&lt;</span>key<span class="token operator">&gt;</span><span class="token operator">&lt;</span>start<span class="token operator">&gt;</span><span class="token operator">&lt;</span>stop<span class="token operator">&gt;</span> <span class="token comment"># 按照索引下标获得元素(从左到右)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3、set集合" tabindex="-1"><a class="header-anchor" href="#_3、set集合"><span><strong>3、Set集合</strong></span></a></h4><p>Redis的set是String类型的无序集合。它底层其实是一个value为null的hash表。</p><p><strong>常用命令</strong></p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>sadd <span class="token operator">&lt;</span>key<span class="token operator">&gt;</span><span class="token operator">&lt;</span>value<span class="token operator"><span class="token file-descriptor important">1</span>&gt;</span><span class="token operator">&lt;</span>value<span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span><span class="token punctuation">..</span>. <span class="token comment"># 将一个或多个member元素加入到集合Key中，已经存在的member元素被忽略</span>
smembers <span class="token operator">&lt;</span>key<span class="token operator">&gt;</span> <span class="token comment"># 取出该集合的所有值</span>
sismember <span class="token operator">&lt;</span>key<span class="token operator">&gt;</span><span class="token operator">&lt;</span>value<span class="token operator">&gt;</span> <span class="token comment"># 判断集合&lt;key&gt;是否为含有该&lt;value&gt;值，有1，没有0</span>
scard <span class="token operator">&lt;</span>key<span class="token operator">&gt;</span> <span class="token comment"># 返回该集合的元素个数</span>
srem <span class="token operator">&lt;</span>key<span class="token operator">&gt;</span><span class="token operator">&lt;</span>value<span class="token operator"><span class="token file-descriptor important">1</span>&gt;</span><span class="token operator">&lt;</span>value<span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span><span class="token punctuation">..</span>. <span class="token comment">#删除集合中的某个元素</span>
spop <span class="token operator">&lt;</span>key<span class="token operator">&gt;</span> <span class="token comment"># 随机从该集合中吐出一个值</span>
srandmember <span class="token operator">&lt;</span>key<span class="token operator">&gt;</span><span class="token operator">&lt;</span>n<span class="token operator">&gt;</span> <span class="token comment"># 随机从该集合中取出n个值，不会从集合中删除</span>
smove <span class="token operator">&lt;</span>souce<span class="token operator">&gt;</span><span class="token operator">&lt;</span>destination<span class="token operator">&gt;</span>value <span class="token comment"># 把集合中一个值从一个集合移动到另一个集合</span>
sinter <span class="token operator">&lt;</span>key<span class="token operator"><span class="token file-descriptor important">1</span>&gt;</span><span class="token operator">&lt;</span>key<span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span> <span class="token comment">#返回两个集合的交集元素</span>
sunion <span class="token operator">&lt;</span>key<span class="token operator"><span class="token file-descriptor important">1</span>&gt;</span><span class="token operator">&lt;</span>key<span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span> <span class="token comment"># 返回两个集合的并集元素</span>
<span class="token function">sdiff</span> <span class="token operator">&lt;</span>key<span class="token operator"><span class="token file-descriptor important">1</span>&gt;</span><span class="token operator">&lt;</span>key<span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span> <span class="token comment"># 返回两个集合的差集元素(key1中的，不包含key2中的)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4、hash" tabindex="-1"><a class="header-anchor" href="#_4、hash"><span><strong>4、Hash</strong></span></a></h4><p>Redis hash 是一个string类型的field 和 value的映射表，hash特别适合存储对象</p><p>类似Java里面的Map</p><p><strong>常用命令</strong></p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>hset <span class="token operator">&lt;</span>key<span class="token operator">&gt;</span><span class="token operator">&lt;</span>field<span class="token operator">&gt;</span><span class="token operator">&lt;</span>value<span class="token operator">&gt;</span> <span class="token comment"># 给&lt;key&gt;集合中的 &lt;field&gt;键赋值&lt;value&gt;</span>
hget <span class="token operator">&lt;</span>key<span class="token operator"><span class="token file-descriptor important">1</span>&gt;</span><span class="token operator">&lt;</span>field<span class="token operator">&gt;</span>从<span class="token operator">&lt;</span>key<span class="token operator"><span class="token file-descriptor important">1</span>&gt;</span>集合<span class="token operator">&lt;</span>field<span class="token operator">&gt;</span>取出value
hmset <span class="token operator">&lt;</span>key<span class="token operator"><span class="token file-descriptor important">1</span>&gt;</span><span class="token operator">&lt;</span>field<span class="token operator"><span class="token file-descriptor important">1</span>&gt;</span><span class="token operator">&lt;</span>value<span class="token operator"><span class="token file-descriptor important">1</span>&gt;</span><span class="token operator">&lt;</span>field<span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span><span class="token operator">&lt;</span>value<span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span><span class="token punctuation">..</span>.<span class="token comment"># 批量设置hash的值</span>
hexists <span class="token operator">&lt;</span>key<span class="token operator"><span class="token file-descriptor important">1</span>&gt;</span><span class="token operator">&lt;</span>field<span class="token operator">&gt;</span> <span class="token comment"># 查看哈希表key中，给定域field是否存在</span>
hkeys <span class="token operator">&lt;</span>key<span class="token operator">&gt;</span>列出该hash集合的所有field
hvals <span class="token operator">&lt;</span>key<span class="token operator">&gt;</span>列出该hash集合的所有value
hincrby <span class="token operator">&lt;</span>key<span class="token operator">&gt;</span><span class="token operator">&lt;</span>field<span class="token operator">&gt;</span><span class="token operator">&lt;</span>increment<span class="token operator">&gt;</span>为hash表 key中的域field的值加上增量1 <span class="token parameter variable">-1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_5、zset有序集合" tabindex="-1"><a class="header-anchor" href="#_5、zset有序集合"><span><strong>5、Zset有序集合</strong></span></a></h4><p>略：</p><h3 id="四、配置文件详解" tabindex="-1"><a class="header-anchor" href="#四、配置文件详解"><span>四、配置文件详解</span></a></h3><p>配置文件在redis.conf里面</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token builtin class-name">bind</span> <span class="token number">192.168</span>.1.100 <span class="token number">10.0</span>.0.1
<span class="token builtin class-name">bind</span> <span class="token number">127.0</span>.0.1 如果不注释即只能通过本地访问
<span class="token comment"># bind 127.0.0.1 可通过其他主机访问</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>protected-mode <span class="token function">yes</span> <span class="token comment"># 开启redis的保护模式 远程不可以访问</span>
protected-mode no <span class="token comment"># 远程可以访问</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="五、springboot整合redis" tabindex="-1"><a class="header-anchor" href="#五、springboot整合redis"><span>五、SpringBoot整合Redis</span></a></h3><p><strong>导入依赖</strong></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>redis<span class="token operator">--</span><span class="token operator">&gt;</span>
    <span class="token generics"><span class="token punctuation">&lt;</span>dependency<span class="token punctuation">&gt;</span></span>
      <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">&gt;</span></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">&gt;</span>
      <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">&gt;</span></span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>starter<span class="token operator">-</span>data<span class="token operator">-</span>redis<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">&gt;</span>

    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>线程池pool<span class="token operator">--</span><span class="token operator">&gt;</span>
    <span class="token generics"><span class="token punctuation">&lt;</span>dependency<span class="token punctuation">&gt;</span></span>
      <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">&gt;</span></span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">&gt;</span>
      <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">&gt;</span></span>commons<span class="token operator">-</span>pool2<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>配置文件</strong></p><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">redis</span><span class="token punctuation">:</span>
    <span class="token key atrule">host</span><span class="token punctuation">:</span> localhost
    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">6379</span>
    <span class="token key atrule">database</span><span class="token punctuation">:</span> <span class="token number">0</span>
<span class="token comment">#连接超时时间</span>
    <span class="token key atrule">connect-timeout</span><span class="token punctuation">:</span> <span class="token number">1800000</span>
    <span class="token key atrule">lettuce</span><span class="token punctuation">:</span>
      <span class="token key atrule">pool</span><span class="token punctuation">:</span>
<span class="token comment">#连接池最大连接数(使用负值表示没有限制)</span>
        <span class="token key atrule">max-active</span><span class="token punctuation">:</span> <span class="token number">20</span>
<span class="token comment">#最大阻塞等待时间(负数表示没限制)</span>
        <span class="token key atrule">max-wait</span><span class="token punctuation">:</span> <span class="token number">-1</span>
<span class="token comment">#连接池中的最大空闲连接</span>
        <span class="token key atrule">max-idle</span><span class="token punctuation">:</span> <span class="token number">5</span>
<span class="token comment">#连接池中的最小空闲连接</span>
        <span class="token key atrule">min-idle</span><span class="token punctuation">:</span> <span class="token number">0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Redis Key Value 序列化</strong></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">redis<span class="token punctuation">.</span>config</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cache<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">CachingConfigurerSupport</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cache<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">EnableCaching</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Bean</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>connection<span class="token punctuation">.</span></span><span class="token class-name">RedisConnectionFactory</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">RedisTemplate</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>serializer<span class="token punctuation">.</span></span><span class="token class-name">GenericJackson2JsonRedisSerializer</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>serializer<span class="token punctuation">.</span></span><span class="token class-name">StringRedisSerializer</span></span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * redis序列化
 */</span>
<span class="token annotation punctuation">@EnableCaching</span>
<span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisConfig</span> <span class="token keyword">extends</span> <span class="token class-name">CachingConfigurerSupport</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> <span class="token function">redisTemplate</span><span class="token punctuation">(</span><span class="token class-name">RedisConnectionFactory</span> connectionFactory<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> redisTemplate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//默认的Key序列化器为：JdkSerializationRedisSerializer</span>
        redisTemplate<span class="token punctuation">.</span><span class="token function">setKeySerializer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringRedisSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// key序列化</span>
        redisTemplate<span class="token punctuation">.</span><span class="token function">setValueSerializer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">GenericJackson2JsonRedisSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// value序列化</span>

        redisTemplate<span class="token punctuation">.</span><span class="token function">setConnectionFactory</span><span class="token punctuation">(</span>connectionFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="六、事务和锁机制-简单操作" tabindex="-1"><a class="header-anchor" href="#六、事务和锁机制-简单操作"><span>六、事务和锁机制(简单操作)</span></a></h3><h4 id="_1、事务定义" tabindex="-1"><a class="header-anchor" href="#_1、事务定义"><span><strong>1、事务定义</strong></span></a></h4><blockquote><p>Redis事务是一个单独的隔离操作：事务中的所有命令都会序列化，按顺序地执行。事务在执行的过程中，不会被其他客户端发送来的命令请求打断。</p><p>Redis事务的主要作用就是<mark>串联多个命令</mark>防止别的命令插队。</p></blockquote><p><strong>Multi 、Exec 、discard</strong></p><blockquote><p>从输入Multi命令开始，输入的命令都会依次进入命令队列中，但不会执行，直到输入Exec 后，Redis会将之前的命令队列中的命令依次执行。</p><p>组队的过程中可以通过discard来放弃组队。</p></blockquote>`,50),r={href:"https://imgse.com/i/p9xBmzn",target:"_blank",rel:"noopener noreferrer"},u=n("img",{src:"https://s1.ax1x.com/2023/06/01/p9xBmzn.jpg",alt:"p9xBmzn.jpg",tabindex:"0",loading:"lazy"},null,-1),d=n("figcaption",null,"p9xBmzn.jpg",-1),k=n("p",null,[n("strong",null,"事务的错误处理（2种情况）")],-1),m=n("blockquote",null,[n("p",null,"1、组队中某个命令出现了报告错误，执行时整个的所有队列都会被取消。")],-1),g={href:"https://imgse.com/i/p9xBKs0",target:"_blank",rel:"noopener noreferrer"},v=n("img",{src:"https://s1.ax1x.com/2023/06/01/p9xBKs0.jpg",alt:"p9xBKs0.jpg",tabindex:"0",loading:"lazy"},null,-1),b=n("figcaption",null,"p9xBKs0.jpg",-1),h=n("p",null,[n("strong",null,"实战操作")],-1),y={href:"https://imgse.com/i/p9xBMLV",target:"_blank",rel:"noopener noreferrer"},f=n("img",{src:"https://s1.ax1x.com/2023/06/01/p9xBMLV.jpg",alt:"p9xBMLV.jpg",tabindex:"0",loading:"lazy"},null,-1),x=n("figcaption",null,"p9xBMLV.jpg",-1),_=n("blockquote",null,[n("p",null,"2、如果执行阶段某个命令报出了错误，则只有报错的命令不会被执行，而其他的命令都会被执行成功！")],-1),j={href:"https://imgse.com/i/p9xBeRs",target:"_blank",rel:"noopener noreferrer"},z=n("img",{src:"https://s1.ax1x.com/2023/06/01/p9xBeRs.jpg",alt:"p9xBeRs.jpg",tabindex:"0",loading:"lazy"},null,-1),w=n("figcaption",null,"p9xBeRs.jpg",-1),R=n("p",null,[n("strong",null,"实战操作")],-1),q={href:"https://imgse.com/i/p9xBuMq",target:"_blank",rel:"noopener noreferrer"},S=n("img",{src:"https://s1.ax1x.com/2023/06/01/p9xBuMq.jpg",alt:"p9xBuMq.jpg",tabindex:"0",loading:"lazy"},null,-1),B=n("figcaption",null,"p9xBuMq.jpg",-1),I=e(`<h4 id="_2、为什么要做成事务" tabindex="-1"><a class="header-anchor" href="#_2、为什么要做成事务"><span><strong>2、为什么要做成事务</strong></span></a></h4><p>想想一个场景：有很多人有你的账户，同时去参加双十一抢购。</p><p>事务冲突的问题 例子</p><ul><li><p>一个请求想给金额减 8000；</p></li><li><p>一个请求想给金额减 5000；</p></li><li><p>一个请求想给金额减 1000。</p></li></ul><p><strong>最终我们可以发现，总共金额是 10000，如果请求全部执行，那最后的金额变为 - 4000，很明显不合理。</strong></p><img src="https://cdn.jsdelivr.net/gh/zhangc233/pic@master/img/image-20210619094341090.png" style="zoom:150%;"><blockquote><p>悲观锁</p></blockquote><img src="https://cdn.jsdelivr.net/gh/zhangc233/pic@master/img/image-20210619094633896.png" style="zoom:150%;"><p><mark>悲观锁 (Pessimistic Lock)</mark>，顾名思义，就是很悲观，每次去拿数据的时候都认为别人会修改，所以每次在拿数据的时候都会上锁，这样别人想拿这个数据就会 block 直到它拿到锁。传统的关系型数据库里边就用到了很多这种锁机制，比如行锁，表锁等，读锁，写锁等，都是在做操作之前先上锁。</p><blockquote><p>乐观锁</p></blockquote><img src="https://cdn.jsdelivr.net/gh/zhangc233/pic@master/img/image-20210619094741479.png" style="zoom:150%;"><p><mark>乐观锁 (Optimistic Lock)</mark>，顾名思义，就是很乐观，每次去拿数据的时候都认为别人不会修改，所以不会上锁，但是在更新的时候会判断一下在此期间别人有没有去更新这个数据，可以使用版本号等机制。乐观锁适用于多读的应用类型，这样可以提高吞吐量。Redis 就是利用这种 check-and-set 机制实现事务的。</p><h4 id="_3、演示乐观锁和事务特性" tabindex="-1"><a class="header-anchor" href="#_3、演示乐观锁和事务特性"><span><strong>3、演示乐观锁和事务特性</strong></span></a></h4><p><strong>WATCH key [key …]</strong></p><p>在执行 multi 之前，先执行 watch key1 [key2]，可以监视一个 (或多个) key ，如果在事务执行之前这个 (或这些) key 被其他命令所改动，那么事务将被打断。</p><figure><img src="https://cdn.jsdelivr.net/gh/zhangc233/pic@master/img/image-20210619095200164.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>unwatch</strong></p><p>取消 WATCH 命令对所有 key 的监视。如果在执行 WATCH 命令之后，EXEC 命令或 DISCARD 命令先被执行了的话，那么就不需要再执行 UNWATCH 了。</p><blockquote><p>Redis 事务三特性</p></blockquote><ul><li><p>单独的隔离操作 ：事务中的所有命令都会序列化、按顺序地执行。事务在执行的过程中，不会被其他客户端发送来的命令请求所打断。</p></li><li><p>没有隔离级别的概念 ：队列中的命令没有提交之前都不会实际被执行，因为事务提交前任何指令都不会被实际执行。</p></li><li><p>不保证原子性 ：事务中如果有一条命令执行失败，其后的命令仍然会被执行，没有回滚 。</p></li></ul><h4 id="_4、秒杀案例" tabindex="-1"><a class="header-anchor" href="#_4、秒杀案例"><span><strong>4、秒杀案例</strong></span></a></h4><h5 id="_1、案例" tabindex="-1"><a class="header-anchor" href="#_1、案例"><span><strong>①、案例</strong></span></a></h5><figure><img src="https://cdn.jsdelivr.net/gh/zhangc233/pic@master/img/image-20210619095633057.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>核心代码</strong></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
     * 秒杀案例
     * <span class="token keyword">@return</span>
     */</span>
    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/ms&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">msTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">String</span> productId <span class="token operator">=</span> <span class="token string">&quot;12345&quot;</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> userId <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
        <span class="token class-name">Random</span> random <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">int</span> num <span class="token operator">=</span> random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            userId<span class="token operator">+=</span>num<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">boolean</span> b <span class="token operator">=</span> <span class="token class-name">Test</span><span class="token punctuation">.</span><span class="token function">doMs</span><span class="token punctuation">(</span>userId<span class="token punctuation">,</span> productId<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> result <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> result<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">doMs</span><span class="token punctuation">(</span><span class="token class-name">String</span> userId <span class="token punctuation">,</span><span class="token class-name">String</span> productId<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">//判断是否为空</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">==</span> userId <span class="token operator">||</span> <span class="token keyword">null</span> <span class="token operator">==</span> productId<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">//连接redis</span>
        <span class="token class-name">Jedis</span> jedis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jedis</span><span class="token punctuation">(</span><span class="token string">&quot;localhost&quot;</span><span class="token punctuation">,</span> <span class="token number">6379</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//设置库存Key</span>
        <span class="token class-name">String</span> kcKey <span class="token operator">=</span> <span class="token string">&quot;kc:&quot;</span> <span class="token operator">+</span> productId<span class="token punctuation">;</span>

        <span class="token comment">//设置秒杀成功用户key</span>
        <span class="token class-name">String</span> userKey <span class="token operator">=</span> <span class="token string">&quot;user:&quot;</span> <span class="token operator">+</span> productId<span class="token punctuation">;</span>

        <span class="token comment">//判断库存是否为null,如果为null则秒杀还没有开始</span>
        <span class="token class-name">String</span> kc <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>kcKey<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">==</span> kc<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;秒杀还没有开始哦！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            jedis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">//判断用户是否重复秒杀</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>jedis<span class="token punctuation">.</span><span class="token function">sismember</span><span class="token punctuation">(</span>userKey<span class="token punctuation">,</span> userId<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;您已经重复秒杀，不能再秒杀！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            jedis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">//判断库存是否&lt;1,&lt;1则秒杀结束</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>kc<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;没货了，秒杀结束&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            jedis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">//秒杀过程</span>
        <span class="token comment">//库存-1</span>
        jedis<span class="token punctuation">.</span><span class="token function">decr</span><span class="token punctuation">(</span>kcKey<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//用户+1</span>
        jedis<span class="token punctuation">.</span><span class="token function">sadd</span><span class="token punctuation">(</span>userKey<span class="token punctuation">,</span>userId<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;秒杀成功了！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        jedis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>控制台输出</strong></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>秒杀成功了！
秒杀成功了！
秒杀成功了！
秒杀成功了！
秒杀成功了！
秒杀成功了！
秒杀成功了！
秒杀成功了！
秒杀成功了！
秒杀成功了！
没货了，秒杀结束
没货了，秒杀结束
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_2、redis-事务-—-秒杀并发模拟" tabindex="-1"><a class="header-anchor" href="#_2、redis-事务-—-秒杀并发模拟"><span><strong>②、redis 事务 — 秒杀并发模拟</strong></span></a></h5><p>使用工具 ab 模拟测试：</p><ul><li><p>CentOS6 默认安装</p></li><li><p>CentOS7 需要手动安装</p></li></ul><p>通过 ab 测试</p><p>im postfile 模拟表单提交参数， 以 &amp; 符号结尾，存放当前目录。</p><p>内容：prodid=0101&amp;</p><p>执行：ab -n 2000 -c 200 -k -p ~/postfile -T application/x-www-form-urlencoded</p><p>访问：http://192.168.2.115:8081/Seckill/doseckill</p><h5 id="_3、超卖、连接超时、库存遗留问题" tabindex="-1"><a class="header-anchor" href="#_3、超卖、连接超时、库存遗留问题"><span><strong>③、超卖、连接超时、库存遗留问题</strong></span></a></h5><img src="https://cdn.jsdelivr.net/gh/zhangc233/pic@master/img/image-20210619100129431.png" style="zoom:150%;"><p><strong>库存数量错误</strong></p><figure><img src="https://cdn.jsdelivr.net/gh/zhangc233/pic@master/img/image-20210619100138313.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>超卖问题</strong></p><figure><img src="https://cdn.jsdelivr.net/gh/zhangc233/pic@master/img/image-20210619100303067.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>利用乐观锁淘汰用户，解决超卖问题。</strong></p><figure><img src="https://cdn.jsdelivr.net/gh/zhangc233/pic@master/img/image-20210619100339429.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>核心代码</strong></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SecKill_redis</span> <span class="token punctuation">{</span>

	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token class-name">Jedis</span> jedis <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Jedis</span><span class="token punctuation">(</span><span class="token string">&quot;192.168.44.168&quot;</span><span class="token punctuation">,</span><span class="token number">6379</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>jedis<span class="token punctuation">.</span><span class="token function">ping</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		jedis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token comment">//秒杀过程</span>
	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">doSecKill</span><span class="token punctuation">(</span><span class="token class-name">String</span> uid<span class="token punctuation">,</span><span class="token class-name">String</span> prodid<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
		<span class="token comment">//1 uid和prodid非空判断</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span>uid <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> prodid <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>

		<span class="token comment">//2 连接redis</span>
		<span class="token comment">//Jedis jedis = new Jedis(&quot;192.168.44.168&quot;,6379);</span>
		<span class="token comment">//通过连接池得到jedis对象</span>
		<span class="token class-name">JedisPool</span> jedisPoolInstance <span class="token operator">=</span> <span class="token class-name">JedisPoolUtil</span><span class="token punctuation">.</span><span class="token function">getJedisPoolInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name">Jedis</span> jedis <span class="token operator">=</span> jedisPoolInstance<span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token comment">//3 拼接key</span>
		<span class="token comment">// 3.1 库存key</span>
		<span class="token class-name">String</span> kcKey <span class="token operator">=</span> <span class="token string">&quot;sk:&quot;</span><span class="token operator">+</span>prodid<span class="token operator">+</span><span class="token string">&quot;:qt&quot;</span><span class="token punctuation">;</span>
		<span class="token comment">// 3.2 秒杀成功用户key</span>
		<span class="token class-name">String</span> userKey <span class="token operator">=</span> <span class="token string">&quot;sk:&quot;</span><span class="token operator">+</span>prodid<span class="token operator">+</span><span class="token string">&quot;:user&quot;</span><span class="token punctuation">;</span>

		<span class="token comment">//监视库存</span>
		jedis<span class="token punctuation">.</span><span class="token function">watch</span><span class="token punctuation">(</span>kcKey<span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token comment">//4 获取库存，如果库存null，秒杀还没有开始</span>
		<span class="token class-name">String</span> kc <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>kcKey<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span>kc <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;秒杀还没有开始，请等待&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			jedis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>

		<span class="token comment">// 5 判断用户是否重复秒杀操作</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span>jedis<span class="token punctuation">.</span><span class="token function">sismember</span><span class="token punctuation">(</span>userKey<span class="token punctuation">,</span> uid<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;已经秒杀成功了，不能重复秒杀&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			jedis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>

		<span class="token comment">//6 判断如果商品数量，库存数量小于1，秒杀结束</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>kc<span class="token punctuation">)</span><span class="token operator">&lt;=</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;秒杀已经结束了&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			jedis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>

		<span class="token comment">//7 秒杀过程</span>
		<span class="token comment">//使用事务</span>
		<span class="token class-name">Transaction</span> multi <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">multi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token comment">//组队操作</span>
		multi<span class="token punctuation">.</span><span class="token function">decr</span><span class="token punctuation">(</span>kcKey<span class="token punctuation">)</span><span class="token punctuation">;</span>
		multi<span class="token punctuation">.</span><span class="token function">sadd</span><span class="token punctuation">(</span>userKey<span class="token punctuation">,</span>uid<span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token comment">//执行</span>
		<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> results <span class="token operator">=</span> multi<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token keyword">if</span><span class="token punctuation">(</span>results <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> results<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;秒杀失败了....&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			jedis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>

		<span class="token comment">//7.1 库存-1</span>
		<span class="token comment">//jedis.decr(kcKey);</span>
		<span class="token comment">//7.2 把秒杀成功用户添加清单里面</span>
		<span class="token comment">//jedis.sadd(userKey,uid);</span>

		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;秒杀成功了..&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		jedis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><img src="https://cdn.jsdelivr.net/gh/zhangc233/pic@master/img/image-20210619100941862.png" style="zoom:150%;"><figure><img src="https://cdn.jsdelivr.net/gh/zhangc233/pic@master/img/image-20210619101004992.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>连接超时，通过连接池解决</strong></p><p>节省每次连接 redis 服务带来的消耗，把连接好的实例反复利用。通过参数管理连接的行为，代码见项目中：</p><p>连接池参数：</p><ul><li><p>MaxTotal：控制一个 pool 可分配多少个 jedis 实例，通过 pool.getResource () 来获取；如果赋值为 - 1，则表示不限制；如果 pool 已经分配了 MaxTotal 个 jedis 实例，则此时 pool 的状态为 exhausted。</p></li><li><p>maxIdle：控制一个 pool 最多有多少个状态为 idle (空闲) 的 jedis 实例；</p></li><li><p>MaxWaitMillis：表示当 borrow 一个 jedis 实例时，最大的等待毫秒数，如果超过等待时间，则直接抛 JedisConnectionException；</p></li><li><p>testOnBorrow：获得一个 jedis 实例的时候是否检查连接可用性（ping ()）；如果为 true，则得到的 jedis 实例均是可用的。</p></li></ul><p><strong>解决库存遗留问题</strong></p><p><strong>LUA 脚本在 Redis 中的优势</strong></p><ul><li><p>将复杂的或者多步的 redis 操作，写为一个脚本，一次提交给 redis 执行，减少反复连接 redis 的次数，提升性能。</p></li><li><p>LUA 脚本是类似 redis 事务，有一定的原子性，不会被其他命令插队，可以完成一些 redis 事务性的操作。</p></li><li><p>但是注意 redis 的 lua 脚本功能，只有在 Redis 2.6 以上的版本才可以使用。</p></li><li><p>利用 lua 脚本淘汰用户，解决超卖问题，redis 2.6 版本以后，通过 lua 脚本解决争抢问题，实际上是 redis 利用其单线程的特性，用任务队列的方式解决多任务并发问题。</p></li></ul><img src="https://cdn.jsdelivr.net/gh/zhangc233/pic@master/img/image-20210619101853376.png" style="zoom:150%;"><h3 id="七、redis-主从复制" tabindex="-1"><a class="header-anchor" href="#七、redis-主从复制"><span><strong>七、Redis 主从复制</strong></span></a></h3><p><strong>主机数据更新后根据配置和策略， 自动同步到备机的 master/slaver 机制，Master 以写为主，Slave 以读为主，主从复制节点间数据是全量的。</strong></p><p>作用：</p><ul><li><p>读写分离，性能扩展</p></li><li><p>容灾快速恢复</p></li></ul><figure><img src="https://cdn.jsdelivr.net/gh/zhangc233/pic@master/img/image-20210619111652745.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>复制原理</strong></p><ul><li><p>Slave 启动成功连接到 master 后会发送一个 sync 命令；</p></li><li><p>Master 接到命令启动后台的存盘进程，同时收集所有接收到的用于修改数据集命令，在后台进程执行完毕之后，master 将传送整个数据文件到 slave，以完成一次完全同步。</p></li><li><p>全量复制：slave 服务器在接收到数据库文件数据后，将其存盘并加载到内存中。</p></li><li><p>增量复制：Master 继续将新的所有收集到的修改命令依次传给 slave，完成同步。</p></li><li><p>但是只要是重新连接 master，一次完全同步（全量复制) 将被自动执行。</p></li></ul><img src="https://cdn.jsdelivr.net/gh/zhangc233/pic@master/img/image-20210619112440704.png" style="zoom:150%;"><p><strong>哨兵模式 (sentinel)</strong></p><p>反客为主：当一个 master 宕机后，后面的 slave 可以立刻升为 master，其后面的 slave 不用做任何修改。用 slaveof no one 指令将从机变为主机。而哨兵模式是反客为主的自动版，能够后台监控主机是否故障，如果故障了根据投票数自动将从库转换为主库。</p><img src="https://cdn.jsdelivr.net/gh/zhangc233/pic@master/img/image-20210619154258222.png" style="zoom:150%;"><p><strong>当主机挂掉，从机选举产生新的主机</strong></p><ul><li><p>哪个从机会被选举为主机呢？根据优先级别：slave-priority 。</p></li><li><p>原主机重启后会变为从机。</p></li></ul><p><strong>复制延时</strong></p><p>由于所有的写操作都是先在 Master 上操作，然后同步更新到 Slave 上，所以从 Master 同步到 Slave 机器有一定的延迟，当系统很繁忙的时</p><p>候，延迟问题会更加严重，Slave 机器数量的增加也会使这个问题更加严重。</p><p><strong>故障恢复</strong></p><figure><img src="https://cdn.jsdelivr.net/gh/zhangc233/pic@master/img/image-20210619154850009.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li><p>优先级：在 redis.conf 中默认 slave-priority 100，值越小优先级越高。</p></li><li><p>偏移量：指获得原主机数据最全的概率。</p></li><li><p>runid：每个 redis 实例启动后都会随机生成一个 40 位的 runid。</p></li></ul><h3 id="八、redis-集群-cluster-模式" tabindex="-1"><a class="header-anchor" href="#八、redis-集群-cluster-模式"><span><strong>八、Redis 集群（cluster 模式）</strong></span></a></h3><p>Redis 集群（包括很多小集群）实现了对 Redis 的水平扩容，即启动 N 个 redis 节点，将整个数据库分布存储在这 N 个节点中，每个节点存储总数据的 1/N，即一个小集群存储 1/N 的数据，每个小集群里面维护好自己的 1/N 的数据。</p><p>Redis 集群通过分区（partition）来提供一定程度的可用性（availability）： 即使集群中有一部分节点失效或者无法进行通讯， 集群也可以继续处理命令请求。</p><p>该模式的 redis 集群特点是：分治、分片。</p><p><strong>问题</strong></p><ul><li><p>容量不够，redis 如何进行扩容？</p></li><li><p>并发写操作， redis 如何分摊？</p></li><li><p>另外，主从模式，薪火相传模式，主机宕机，导致 ip 地址发生变化，应用程序中配置需要修改对应的主机地址、端口等信息。</p></li><li><p>之前通过代理主机来解决，但是 redis3.0 中提供了解决方案。就是无中心化集群配置。</p></li></ul><p><strong>集群连接</strong></p><p>普通方式登录：可能直接进入读主机，存储数据时，会出现 MOVED 重定向操作，所以，应该以集群方式登录。</p><img src="https://cdn.jsdelivr.net/gh/zhangc233/pic@master/img/image-20210619162020586.png" style="zoom:150%;"><p>集群登录：redis-cli -c -p 6379 采用集群策略连接，设置数据会自动切换到相应的写主机.</p><p><strong>redis cluster 如何分配这六个节点？</strong></p><ul><li>一个集群至少要有三个主节点。</li><li>选项 –cluster-replicas 1 ：表示我们希望为集群中的每个主节点创建一个从节点。</li><li>分配原则尽量保证每个主数据库运行在不同的 IP 地址，每个从库和主库不在一个 IP 地址上。</li></ul><p><strong>什么是 slots？</strong> 一个 Redis 集群包含 16384 个插槽（hash slot），数据库中的每个键都属于这 16384 个插槽的其中一个。集群使用公式 CRC16 (key) % 16384 来计算键 key 属于哪个槽， 其中 CRC16 (key) 语句用于计算键 key 的 CRC16 校验和 。</p><p>集群中的每个节点负责处理一部分插槽。 举个例子， 如果一个集群可以有主节点， 其中：</p><ul><li>节点 A 负责处理 0 号至 5460 号插槽。</li><li>节点 B 负责处理 5461 号至 10922 号插槽。</li><li>节点 C 负责处理 10923 号至 16383 号插槽。</li></ul><p><strong>在集群中录入值</strong> 在 redis-cli 每次录入、查询键值，redis 都会计算出该 key 应该送往的插槽，如果不是该客户端对应服务器的插槽，redis 会报错，并告知应前往的 redis 实例地址和端口。</p><p>redis-cli 客户端提供了 –c 参数实现自动重定向。如 redis-cli -c –p 6379 登入后，再录入、查询键值对可以自动重定向。不在一个 slot 下的键值，是不能使用 mget,mset 等多键操作。</p><p><strong>故障恢复</strong></p><ul><li><p>如果主节点下线？从节点能否自动升为主节点？注意：15 秒超时</p></li><li><p>主节点恢复后，主从关系会如何？主节点回来变成从机。</p></li></ul><p><strong>如果所有某一段插槽的主从节点都宕掉，redis 服务是否还能继续？</strong></p><ul><li><p>如果某一段插槽的主从都挂掉，而 cluster-require-full-coverage 为 yes ，那么整个集群都挂掉。</p></li><li><p>如果某一段插槽的主从都挂掉，而 cluster-require-full-coverage 为 no ，那么，该插槽数据全都不能使用，也无法存储。</p></li></ul><p><strong>Redis 集群优点</strong></p><ul><li><p>实现扩容</p></li><li><p>分摊压力</p></li><li><p>无中心配置相对简单</p></li></ul><p><strong>Redis 集群不足</strong></p><ul><li><p>多键操作是不被支持的。</p></li><li><p>多键的 Redis 事务是不被支持的，lua 脚本不被支持。</p></li><li><p>由于集群方案出现较晚，很多公司已经采用了其他的集群方案，而代理或者客户端分片的方案想要迁移至 redis cluster，需要整体迁移而不是逐步过渡，复杂度较大。</p></li></ul><h3 id="九、redis-应用问题解决" tabindex="-1"><a class="header-anchor" href="#九、redis-应用问题解决"><span><strong>九、Redis 应用问题解决</strong></span></a></h3><h4 id="_1、缓存穿透" tabindex="-1"><a class="header-anchor" href="#_1、缓存穿透"><span><strong>①、缓存穿透</strong></span></a></h4><p><strong>问题描述</strong></p><p>key 对应的数据在数据源并不存在，每次针对此 key 的请求从缓存获取不到，请求都会压到数据源（数据库），从而可能压垮数据源。比如:用一个不存在的用户 id 获取用户信息，不论缓存还是数据库都没有，若黑客利用此漏洞进行攻击可能压垮数据库。</p><p>缓存穿透发生的条件：</p><ul><li>应用服务器压力变大</li><li>redis 命中率降低</li><li>一直查询数据库，使得数据库压力太大而压垮</li></ul><p>其实 redis 在这个过程中一直平稳运行，崩溃的是我们的数据库（如 MySQL）。</p><p>缓存穿透发生的原因：黑客或者其他非正常用户频繁进行很多非正常的 url 访问，使得 redis 查询不到数据库。</p><figure><img src="https://cdn.jsdelivr.net/gh/zhangc233/pic@master/img/image-20210619163643698.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><blockquote><p><strong>解决方案</strong></p></blockquote><ul><li><p>对空值缓存：如果一个查询返回的数据为空（不管是数据是否不存在），我们仍然把这个空结果（null）进行缓存，设置空结果的过期时间会很短，最长不超过五分钟。</p></li><li><p>设置可访问的名单（白名单）：使用 bitmaps 类型定义一个可以访问的名单，名单 id 作为 bitmaps 的偏移量，每次访问和 bitmap 里面的 id 进行比较，如果访问 id 不在 bitmaps 里面，进行拦截，不允许访问。</p></li><li><p>采用布隆过滤器：布隆过滤器（Bloom Filter）是 1970 年由布隆提出的。它实际上是一个很长的二进制向量 (位图) 和一系列随机映射函数（哈希函数）。布隆过滤器可以用于检索一个元素是否在一个集合中。它的优点是空间效率和查询时间都远远超过一般的算法，缺点是有一定的误识别率和删除困难。</p></li><li><p>进行实时监控：当发现 Redis 的命中率开始急速降低，需要排查访问对象和访问的数据，和运维人员配合，可以设置黑名单限制服务。</p></li></ul><h4 id="_2、缓存击穿" tabindex="-1"><a class="header-anchor" href="#_2、缓存击穿"><span><strong>②、缓存击穿</strong></span></a></h4><p><strong>问题描述</strong></p><p>key 对应的数据存在，但在 redis 中过期，此时若有大量并发请求过来，这些请求发现缓存过期一般都会从后端数据库加载数据并回设到缓存，这个时候大并发的请求可能会瞬间把后端数据库压垮。</p><p>缓存击穿的现象：</p><ul><li>数据库访问压力瞬时增加，数据库崩溃</li><li>redis 里面没有出现大量 key 过期</li><li>redis 正常运行</li></ul><p>缓存击穿发生的原因：redis 某个 key 过期了，大量访问使用这个 key（热门 key）。</p><figure><img src="https://cdn.jsdelivr.net/gh/zhangc233/pic@master/img/image-20210619165201337.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><blockquote><p><strong>解决方案</strong></p></blockquote><p>key 可能会在某些时间点被超高并发地访问，是一种非常 “热点” 的数据。</p><ul><li><p>预先设置热门数据：在 redis 高峰访问之前，把一些热门数据提前存入到 redis 里面，加大这些热门数据 key 的时长。</p></li><li><p>实时调整：现场监控哪些数据热门，实时调整 key 的过期时长。</p></li><li><p>使用锁：</p><ul><li>就是在缓存失效的时候（判断拿出来的值为空），不是立即去 load db。</li><li>先使用缓存工具的某些带成功操作返回值的操作（比如 Redis 的 SETNX）去 set 一个 mutex key。</li><li>当操作返回成功时，再进行 load db 的操作，并回设缓存，最后删除 mutex key；</li><li>当操作返回失败，证明有线程在 load db，当前线程睡眠一段时间再重试整个 get 缓存的方法。</li></ul></li></ul><figure><img src="https://cdn.jsdelivr.net/gh/zhangc233/pic@master/img/image-20210619165505113.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="_3、缓存雪崩" tabindex="-1"><a class="header-anchor" href="#_3、缓存雪崩"><span><strong>③、缓存雪崩</strong></span></a></h4><p><strong>问题描述</strong></p><p>key 对应的数据存在，但在 redis 中过期，此时若有大量并发请求过来，这些请求发现缓存过期一般都会从后端数据库加载数据并回设到缓存，这个时候大并发的请求可能会瞬间把后端数据库压垮。</p><p>缓存雪崩与缓存击穿的区别在于这里针对很多 key 缓存，前者则是某一个 key 正常访问。</p><figure><img src="https://cdn.jsdelivr.net/gh/zhangc233/pic@master/img/image-20210619170416116.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>缓存失效瞬间：</strong></p><figure><img src="https://cdn.jsdelivr.net/gh/zhangc233/pic@master/img/image-20210619170456227.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><blockquote><p><strong>解决方案</strong></p></blockquote><ul><li><p>构建多级缓存架构：nginx 缓存 + redis 缓存 + 其他缓存（ehcache 等）。</p></li><li><p>使用锁或队列：用加锁或者队列的方式来保证不会有大量的线程对数据库一次性进行读写，从而避免失效时大量的并发请求落到底层存储系统上，该方法不适用高并发情况。</p></li><li><p>设置过期标志更新缓存：记录缓存数据是否过期（设置提前量），如果过期会触发通知另外的线程在后台去更新实际 key 的缓存。</p></li><li><p>将缓存失效时间分散开：比如可以在原有的失效时间基础上增加一个随机值，比如 1-5 分钟随机，这样每一个缓存的过期时间的重复率就会降低，就很难引发集体失效的事件。</p></li></ul><h4 id="_4、分布式锁" tabindex="-1"><a class="header-anchor" href="#_4、分布式锁"><span><strong>④、分布式锁</strong></span></a></h4><p><strong>问题描述</strong></p><p>随着业务发展的需要，原单体单机部署的系统被演化成分布式集群系统后，由于分布式系统多线程的特点以及分布在不同机器上，这将使原单机部署情况下的并发控制锁策略失效，单纯的 Java API 并不能提供分布式锁的能力。为了解决这个问题就需要一种跨 JVM 的互斥机制来控制共享资源的访问，这就是分布式锁要解决的问题！</p><ul><li><p>分布式锁主流的实现方案：</p></li><li><p>基于数据库实现分布式锁</p></li><li><p>基于缓存（Redis 等）</p></li><li><p>基于 Zookeeper</p></li></ul><p>根据实现方式，分布式锁还可以分为类 CAS 自旋式分布式锁以及 event 事件类型分布式锁：</p><ul><li>类 CAS 自旋式分布式锁：询问的方式，类似 java 并发编程中的线程获询问的方式尝试加锁，如 mysql、redis。</li><li>另外一类是 event 事件通知进程后续锁的变化，轮询向外的过程，如 zookeeper、etcd。</li></ul><p>每一种分布式锁解决方案都有各自的优缺点：</p><ul><li><p>性能：redis 最高</p></li><li><p>可靠性：zookeeper 最高</p></li></ul><blockquote><p><strong>解决方案：使用 redis 实现分布式锁</strong></p></blockquote><figure><img src="https://cdn.jsdelivr.net/gh/zhangc233/pic@master/img/image-20210619213926122.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li><p>setnx：通过该命令尝试获得锁，没有获得锁的线程会不断等待尝试。</p></li><li><p>set key ex 3000nx：设置过期时间，自动释放锁，解决当某一个业务异常而导致锁无法释放的问题。但是当业务运行超过过期时间时，开辟监控线程增加该业务的运行时间，直到运行结束，释放锁。</p></li><li><p>uuid：设置 uuid，释放前获取这个值，判断是否自己的锁，防止误删锁，造成没锁的情况。</p></li></ul><h4 id="_5、redlock" tabindex="-1"><a class="header-anchor" href="#_5、redlock"><span><strong>⑤、RedLock</strong></span></a></h4><p>Redlock 是一种算法，Redlock 也就是 Redis Distributed Lock，可用实现多节点 redis 的分布式锁。RedLock 官方推荐，Redisson 完成了对 Redlock 算法封装。</p><p>此种方式具有以下特性：</p><ul><li>互斥访问：即永远只有一个 client 能拿到锁。</li><li>避免死锁：最终 client 都可能拿到锁，不会出现死锁的情况，即使锁定资源的服务崩溃或者分区，仍然能释放锁。</li><li>容错性：只要大部分 Redis 节点存活（一半以上），就可以正常提供服务</li></ul><p>RedLock 原理（了解）</p><ul><li>获取当前 Unix 时间，以毫秒为单位。</li><li>依次尝试从 N 个实例，使用相同的 key 和随机值获取锁。在步骤 2，当向 Redis 设置锁时，客户端应该设置一个网连接和响应超时时间，这个超时时间应该小于锁的失效时间。例如你的锁自动失效时间为 10 秒，则超时时间应该在5-50 毫秒之间。这样可以避免服务器端 Redis 已经挂掉的情况下，客户端还在死死地等待响应结果。如果服务器端没有在规定时间内响应，客户端应该尽快尝试另外一个 Redis 实例。</li><li>客户端使用当前时间减去开始获取锁时间（步骤 1 记录的时间）就得到获取锁使用的时间。当且仅当从大多数（这里是 3 个节点）的 Redis 节点都取到锁，并且使用的时间小于锁失效时间时，锁才算获取成功。</li><li>如果取到了锁，key 的真正有效时间等于有效时间减去获取锁所使用的时间（步骤 3 计算的结果）。</li><li>如果因为某些原因，获取锁失败（没有在至少 N/2+1 个 Redis 实例取到锁或者取锁时间已经超过了有效时间），客户端应该在所有的 Redis 实例上进行解锁（即便某些 Redis 实例根本就没有加锁成功）。</li></ul>`,148);function K(M,C){const s=p("ExternalLinkIcon");return o(),l("div",null,[c,n("figure",null,[n("a",r,[u,a(s)]),d]),k,m,n("figure",null,[n("a",g,[v,a(s)]),b]),h,n("figure",null,[n("a",y,[f,a(s)]),x]),_,n("figure",null,[n("a",j,[z,a(s)]),w]),R,n("figure",null,[n("a",q,[S,a(s)]),B]),I])}const L=t(i,[["render",K],["__file","redis.html.vue"]]),E=JSON.parse('{"path":"/posts/%E4%B8%AD%E9%97%B4%E4%BB%B6/Redis/redis.html","title":"Redis快速入门","lang":"zh-CN","frontmatter":{"icon":"pen-to-square","date":"2022-01-12T00:00:00.000Z","category":["中间件"],"tag":["redis"],"star":true,"sticky":true,"description":"Redis快速入门 一、Redis 概述 Redis 介绍 Redis 是一个开源的 key-value 存储系统。 和 Memcached 类似，它支持存储的 value 类型相对更多，包括 string (字符串)、list (链表)、set (集合)、zset (sorted set –有序集合) 和 hash（哈希类型）。 这些数据类型都支持 ...","head":[["meta",{"property":"og:url","content":"https://swx08.github.io/vuepress/posts/%E4%B8%AD%E9%97%B4%E4%BB%B6/Redis/redis.html"}],["meta",{"property":"og:site_name","content":"文学博客"}],["meta",{"property":"og:title","content":"Redis快速入门"}],["meta",{"property":"og:description","content":"Redis快速入门 一、Redis 概述 Redis 介绍 Redis 是一个开源的 key-value 存储系统。 和 Memcached 类似，它支持存储的 value 类型相对更多，包括 string (字符串)、list (链表)、set (集合)、zset (sorted set –有序集合) 和 hash（哈希类型）。 这些数据类型都支持 ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://cdn.jsdelivr.net/gh/zhangc233/pic@master/img/image-20210618160003509.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:alt","content":"Redis快速入门"}],["meta",{"property":"article:author","content":"sixkey"}],["meta",{"property":"article:tag","content":"redis"}],["meta",{"property":"article:published_time","content":"2022-01-12T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Redis快速入门\\",\\"image\\":[\\"https://cdn.jsdelivr.net/gh/zhangc233/pic@master/img/image-20210618160003509.png\\",\\"https://cdn.jsdelivr.net/gh/zhangc233/pic@master/img/image-20210618160101040.png\\",\\"https://s1.ax1x.com/2023/06/01/p9xBmzn.jpg\\",\\"https://s1.ax1x.com/2023/06/01/p9xBKs0.jpg\\",\\"https://s1.ax1x.com/2023/06/01/p9xBMLV.jpg\\",\\"https://s1.ax1x.com/2023/06/01/p9xBeRs.jpg\\",\\"https://s1.ax1x.com/2023/06/01/p9xBuMq.jpg\\",\\"https://cdn.jsdelivr.net/gh/zhangc233/pic@master/img/image-20210619095200164.png\\",\\"https://cdn.jsdelivr.net/gh/zhangc233/pic@master/img/image-20210619095633057.png\\",\\"https://cdn.jsdelivr.net/gh/zhangc233/pic@master/img/image-20210619100138313.png\\",\\"https://cdn.jsdelivr.net/gh/zhangc233/pic@master/img/image-20210619100303067.png\\",\\"https://cdn.jsdelivr.net/gh/zhangc233/pic@master/img/image-20210619100339429.png\\",\\"https://cdn.jsdelivr.net/gh/zhangc233/pic@master/img/image-20210619101004992.png\\",\\"https://cdn.jsdelivr.net/gh/zhangc233/pic@master/img/image-20210619111652745.png\\",\\"https://cdn.jsdelivr.net/gh/zhangc233/pic@master/img/image-20210619154850009.png\\",\\"https://cdn.jsdelivr.net/gh/zhangc233/pic@master/img/image-20210619163643698.png\\",\\"https://cdn.jsdelivr.net/gh/zhangc233/pic@master/img/image-20210619165201337.png\\",\\"https://cdn.jsdelivr.net/gh/zhangc233/pic@master/img/image-20210619165505113.png\\",\\"https://cdn.jsdelivr.net/gh/zhangc233/pic@master/img/image-20210619170416116.png\\",\\"https://cdn.jsdelivr.net/gh/zhangc233/pic@master/img/image-20210619170456227.png\\",\\"https://cdn.jsdelivr.net/gh/zhangc233/pic@master/img/image-20210619213926122.png\\"],\\"datePublished\\":\\"2022-01-12T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"sixkey\\",\\"url\\":\\"https://swx08.github.io\\"}]}"]]},"headers":[{"level":3,"title":"一、Redis 概述","slug":"一、redis-概述","link":"#一、redis-概述","children":[]},{"level":3,"title":"二、Key键操作","slug":"二、key键操作","link":"#二、key键操作","children":[]},{"level":3,"title":"三、常用数据类型","slug":"三、常用数据类型","link":"#三、常用数据类型","children":[{"level":4,"title":"1、String字符串","slug":"_1、string字符串","link":"#_1、string字符串","children":[]},{"level":4,"title":"2、List列表","slug":"_2、list列表","link":"#_2、list列表","children":[]},{"level":4,"title":"3、Set集合","slug":"_3、set集合","link":"#_3、set集合","children":[]},{"level":4,"title":"4、Hash","slug":"_4、hash","link":"#_4、hash","children":[]},{"level":4,"title":"5、Zset有序集合","slug":"_5、zset有序集合","link":"#_5、zset有序集合","children":[]}]},{"level":3,"title":"四、配置文件详解","slug":"四、配置文件详解","link":"#四、配置文件详解","children":[]},{"level":3,"title":"五、SpringBoot整合Redis","slug":"五、springboot整合redis","link":"#五、springboot整合redis","children":[]},{"level":3,"title":"六、事务和锁机制(简单操作)","slug":"六、事务和锁机制-简单操作","link":"#六、事务和锁机制-简单操作","children":[{"level":4,"title":"1、事务定义","slug":"_1、事务定义","link":"#_1、事务定义","children":[]},{"level":4,"title":"2、为什么要做成事务","slug":"_2、为什么要做成事务","link":"#_2、为什么要做成事务","children":[]},{"level":4,"title":"3、演示乐观锁和事务特性","slug":"_3、演示乐观锁和事务特性","link":"#_3、演示乐观锁和事务特性","children":[]},{"level":4,"title":"4、秒杀案例","slug":"_4、秒杀案例","link":"#_4、秒杀案例","children":[{"level":5,"title":"①、案例","slug":"_1、案例","link":"#_1、案例","children":[]},{"level":5,"title":"②、redis 事务 — 秒杀并发模拟","slug":"_2、redis-事务-—-秒杀并发模拟","link":"#_2、redis-事务-—-秒杀并发模拟","children":[]},{"level":5,"title":"③、超卖、连接超时、库存遗留问题","slug":"_3、超卖、连接超时、库存遗留问题","link":"#_3、超卖、连接超时、库存遗留问题","children":[]}]}]},{"level":3,"title":"七、Redis 主从复制","slug":"七、redis-主从复制","link":"#七、redis-主从复制","children":[]},{"level":3,"title":"八、Redis 集群（cluster 模式）","slug":"八、redis-集群-cluster-模式","link":"#八、redis-集群-cluster-模式","children":[]},{"level":3,"title":"九、Redis 应用问题解决","slug":"九、redis-应用问题解决","link":"#九、redis-应用问题解决","children":[{"level":4,"title":"①、缓存穿透","slug":"_1、缓存穿透","link":"#_1、缓存穿透","children":[]},{"level":4,"title":"②、缓存击穿","slug":"_2、缓存击穿","link":"#_2、缓存击穿","children":[]},{"level":4,"title":"③、缓存雪崩","slug":"_3、缓存雪崩","link":"#_3、缓存雪崩","children":[]},{"level":4,"title":"④、分布式锁","slug":"_4、分布式锁","link":"#_4、分布式锁","children":[]},{"level":4,"title":"⑤、RedLock","slug":"_5、redlock","link":"#_5、redlock","children":[]}]}],"git":{},"readingTime":{"minutes":24.86,"words":7459},"filePathRelative":"posts/中间件/Redis/redis.md","localizedDate":"2022年1月12日","excerpt":"\\n<h3>一、Redis 概述</h3>\\n<p><strong>Redis 介绍</strong></p>\\n<ul>\\n<li>Redis 是一个开源的 key-value 存储系统。</li>\\n<li>和 Memcached 类似，它支持存储的 value 类型相对更多，包括 string (字符串)、list (链表)、set (集合)、zset (sorted set –有序集合) 和 hash（哈希类型）。</li>\\n<li>这些数据类型都支持 push/pop、add/remove 及取交集并集和差集及更丰富的操作，而且这些操作都是原子性的。</li>\\n<li>在此基础上，Redis 支持各种不同方式的排序。</li>\\n<li>与 memcached 一样，为了保证效率，数据都是缓存在内存中。</li>\\n<li>区别的是 Redis 会周期性的把更新的数据写入磁盘或者把修改操作写入追加的记录文件。</li>\\n<li>并且在此基础上实现了 master-slave (主从) 同步。应用场景配合关系型数据库做高速缓存</li>\\n</ul>","autoDesc":true}');export{L as comp,E as data};
